#+TITLE: Will Cohen's Emacs configuration
#+OPTIONS: toc:4 h:4
# Time-stamp: <2015-04-11 22:38:38 wcohen>

* Configuration
** About this file
<<babel-init>>

Org-babel file for Emacs configuration. Within org-mode, edit source
blocks with C-c \' (=org-edit-special=).

See [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]] for org-babel setup.



** Emacs installation

*** Mac

The best way to get an up-to-date version of emacs is using
=homebrew=. If the =git HEAD= version causes problems, install the
latest stable version by omitting =--HEAD --use-git-head=.

#+begin_example
brew update
brew unlink emacs
brew uninstall emacs
brew install emacs --HEAD --use-git-head --with-cocoa \
-- with-gnutls --with-rsvg --with-imagemagick
brew linkapps emacs
#+end_example

*** Windows

ESS on Windows has to be installed without MELPA. Get it [[http://vgoulet.act.ulaval.ca/en/emacs/][here]].

On Windows 7, after running emacs:
Pin it to taskbar, modify the shortcut to =runemacs.exe= instead of
=emacs.exe=, and set it to run in XP SP3 compatibility mode (so the
shell can be switched to cygwin =bash= if desired.


** Bootstrapping the init

Until the whole file gets migrated to =org-babel=, all of the
supporting lisp files need to get added to path.

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Emacs initialization

*** Benchmarking

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-benchmarking.el]].

#+begin_src emacs-lisp
  (defun wc/time-subtract-millis (b a)
    (* 1000.0 (float-time (time-subtract b a))))


  (defvar wc/require-times nil
    "A list of (FEATURE . LOAD-DURATION).
  LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

  (defadvice require
      (around build-require-times (feature &optional filename noerror) activate)
    "Note in `wc/require-times' the time taken to require each feature."
    (let* ((already-loaded (memq feature features))
           (require-start-time (and (not already-loaded) (current-time))))
      (prog1
          ad-do-it
        (when (and (not already-loaded) (memq feature features))
          (add-to-list 'wc/require-times
                       (cons feature
                             (wc/time-subtract-millis (current-time)
                                                             require-start-time))
                       t)))))
#+end_src

*** Additional global variables

#+begin_src emacs-lisp
  (defconst *spell-check-support-enabled* nil) ;; Enable with t if you prefer
  (defconst *is-mac* (eq system-type 'darwin))
  (defconst *is-linux* (eq system-type 'gnu/linux))
  (defconst *is-windows* (eq system-type 'windows-nt))
  (defconst *is-my-laptop* (eq system-name 'Will-MacBookPro))
  (defconst *is-my-desktop* (eq system-name 'UTILE-T1700-08))
#+end_src

*** Needed utilities

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-utils.el]].

#+begin_src emacs-lisp
  (if (fboundp 'with-eval-after-load)
      (defalias 'after-load 'with-eval-after-load)
    (defmacro after-load (feature &rest body)
      "After FEATURE is loaded, evaluate BODY."
      (declare (indent defun))
      `(eval-after-load ,feature
         '(progn ,@body))))


  ;;----------------------------------------------------------------------------
  ;; Handier way to add modes to auto-mode-alist
  ;;----------------------------------------------------------------------------
  (defun add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))


  ;;----------------------------------------------------------------------------
  ;; String utilities missing from core emacs
  ;;----------------------------------------------------------------------------
  (defun wc/string-all-matches (regex str &optional group)
    "Find all matches for `REGEX' within `STR', returning the full match string or group `GROUP'."
    (let ((result nil)
          (pos 0)
          (group (or group 0)))
      (while (string-match regex str pos)
        (push (match-string group str) result)
        (setq pos (match-end group)))
      result))

  (defun wc/string-rtrim (str)
    "Remove trailing whitespace from `STR'."
    (replace-regexp-in-string "[ \t\n]+$" "" str))


  ;;----------------------------------------------------------------------------
  ;; Find the directory containing a given library
  ;;----------------------------------------------------------------------------
  (autoload 'find-library-name "find-func")
  (defun wc/directory-of-library (library-name)
    "Return the directory in which the `LIBRARY-NAME' load file is found."
    (file-name-as-directory (file-name-directory (find-library-name library-name))))


  ;;----------------------------------------------------------------------------
  ;; Delete the current file
  ;;----------------------------------------------------------------------------
  (defun delete-this-file ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (or (buffer-file-name) (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))


  ;;----------------------------------------------------------------------------
  ;; Rename the current file
  ;;----------------------------------------------------------------------------
  (defun rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (when (file-exists-p filename)
            (rename-file filename new-name 1))
          (rename-buffer new-name)
          (set-visited-file-name new-name)))))

  ;;----------------------------------------------------------------------------
  ;; Browse current HTML file
  ;;----------------------------------------------------------------------------
  (defun browse-current-file ()
    "Open the current file as a URL using `browse-url'."
    (interactive)
    (let ((file-name (buffer-file-name)))
      (if (tramp-tramp-file-p file-name)
          (error "Cannot open tramp file")
        (browse-url (concat "file://" file-name)))))


#+end_src


*** Packages

#+begin_src emacs-lisp

(require 'package)

;;; Set the repository list

(setq package-archives '(("melpa" . "http://melpa.org/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")))

;;; On-demand installation of packages

(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (if (package-installed-p package min-version)
      t
    (if (or (assoc package package-archive-contents) no-refresh)
        (package-install package)
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))


(defun maybe-require-package (package &optional min-version no-refresh)
  "Try to install PACKAGE, and return non-nil if successful.
In the event of failure, return nil and print a warning message.
Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
available package lists will not be re-downloaded in order to
locate PACKAGE."
  (condition-case err
      (require-package package min-version no-refresh)
    (error
     (message "Couldn't install package `%s': %S" package err)
     nil)))

;;; Start package.el

(setq package-enable-at-startup nil)
(package-initialize)

(require-package 'fullframe)
(fullframe list-packages quit-window)

(require-package 'cl-lib)
(require 'cl-lib)

(defun sanityinc/set-tabulated-list-column-width (col-name width)
  "Set any column with name COL-NAME to the given WIDTH."
  (cl-loop for column across tabulated-list-format
           when (string= col-name (car column))
           do (setf (elt column 1) width)))

(defun sanityinc/maybe-widen-package-menu-columns ()
  "Widen some columns of the package menu table to avoid truncation."
  (when (boundp 'tabulated-list-format)
    (sanityinc/set-tabulated-list-column-width "Version" 13)
    (let ((longest-archive-name (apply 'max (mapcar 'length (mapcar 'car package-archives)))))
      (sanityinc/set-tabulated-list-column-width "Archive" longest-archive-name))))

(add-hook 'package-menu-mode-hook 'sanityinc/maybe-widen-package-menu-columns)



#+end_src

** Org

*** Templates

**** Structure templates

Insert blocks using =<s[TAB]=, etc.
Redefine =<l= to insert Emacs lisp block instead of LaTeX.

#+begin_src emacs-lisp
  (setq org-structure-template-alist
        '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
          ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
          ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
          ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
          ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
          ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
          ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
          ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
          ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
          ("H" "#+html: " "<literal style=\"html\">?</literal>")
          ("a" "#+begin_ascii\n?\n#+end_ascii")
          ("A" "#+ascii: ")
          ("i" "#+index: ?" "#+index: ?")
          ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+end_src

*** HTML Export

Attempting to export to HTML gives the following error:

#+begin_example
  org-html-fontify-code: Wrong number of arguments: #[(_beg _end) "À " [font-lock-fontify-buffer] 1], 0
#+end_example

Accordingly, follow the directions from [[http://wenshanren.org/?p%3D781][here]].

#+begin_src emacs-lisp
  (defun org-font-lock-ensure ()
    (font-lock-fontify-buffer))
#+end_src

** File manipulation

*** Delete file and buffer

From [[http://emacsredux.com/blog/2013/04/03/delete-file-and-buffer/]].

#+begin_src emacs-lisp
  (defun delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
#+end_src

* Unmigrated init here


#+BEGIN_SRC emacs-lisp


  ;;; This file bootstraps the configuration and all its related files.



  ;;; Bootstrapping
  (require 'init-elpa)      ;; Machinery for installing required packages
  (require 'init-exec-path) ;; Set up $PATH

  (require-package 'wgrep)
  (require-package 'project-local-variables)
  (require-package 'diminish)
  (require-package 'scratch)
  (require-package 'mwe-log-commands)

  (require 'init-gui-frames)              ; GUI features
  (require 'init-win32)                   ; Windows-specific issues
  (require 'init-mac)                     ; Mac-specific issues
  (require 'init-shortcuts)               ; Miscellaneous
  (require 'init-text)                    ; Fill mode
  (require 'init-indentation)             ; Indent after yanking
  (require 'init-themes)
  ;; (require 'init-ido) ; disabled and replaced by helm

  (require 'init-editing-utils)
  (require 'init-paredit)             ; Paredit, etc.
  (require 'init-r)
  (require 'init-postgres)
  (require 'init-tramp)
  (require 'init-fonts)
  (require 'init-helm)
  (require 'init-windows)
  (require 'init-discover)
  (require 'init-company)
  (require 'init-vc)
  (require 'init-git)
  (require 'init-github)
  ;; (require 'init-js)
  (require 'init-flycheck)
  (require 'init-spelling)
  (require 'init-flyspell)
  (require 'init-javascript)
  (require 'init-python)
  (require 'init-lisp)
  (require 'init-web)
  (require 'init-company)


  ;; Extra packages which don't require any configuration

  (require-package 'htmlize)
  (require-package 'regex-tool)

  ;;----------------------------------------------------------------------------
  ;; Allow access from emacsclient
  ;;----------------------------------------------------------------------------
  (require 'server)
  (unless (server-running-p)
    (server-start))


  ;;----------------------------------------------------------------------------
  ;; Variables configured via the interactive 'customize' interface
  ;;----------------------------------------------------------------------------
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))


  ;;----------------------------------------------------------------------------
  ;; Locales (setting them earlier in this file doesn't work in X)
  ;;----------------------------------------------------------------------------
  (require 'init-locales)

  (add-hook 'after-init-hook
            (lambda ()
              (message "init completed in %.2fms"
                       (wc/time-subtract-millis after-init-time before-init-time))))


  (provide 'init)

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     (quote
      (magit-gh-pulls github-clone bug-reference-github github-browse-file yagist magit-svn zenburn-theme whole-line-or-region whitespace-cleanup-mode wgrep web-mode unfill undo-tree tern-auto-complete switch-window scratch regex-tool rainbow-delimiters project-local-variables paredit-menu paredit-everywhere page-break-lines nodejs-repl mwe-log-commands multiple-cursors move-dup magit json-mode js3-mode js-comint htmlize highlight-symbol highlight-escape-sequences helm-projectile guru-mode guide-key golden-ratio gitignore-mode gitconfig-mode git-timemachine git-messenger git-blame geiser fullframe flycheck fill-column-indicator expand-region exec-path-from-shell ess elpy discover diminish diff-hl deft coffee-mode browse-kill-ring ace-jump-mode ac-js2))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+END_SRC
