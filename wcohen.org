#+TITLE: Will Cohen's Emacs configuration
#+OPTIONS: toc:4 h:4
# Time-stamp: <2015-04-16 17:21:13 wcohen>

* Configuration
** About this file

Org-babel file for Emacs configuration. Within org-mode, edit source
blocks with C-c \' (=org-edit-special=).

See [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]] for org-babel setup.


** Emacs installation

*** Mac

The best way to get an up-to-date version of emacs is using
=homebrew=. If the =git HEAD= version causes problems, install the
latest stable version by omitting =--HEAD --use-git-head=.

#+begin_example
brew update
brew unlink emacs
brew uninstall emacs
brew install emacs --HEAD --use-git-head --with-cocoa \
-- with-gnutls --with-rsvg --with-imagemagick
brew linkapps emacs
#+end_example

*** Windows

ESS on Windows has to be installed without MELPA. Get it [[http://vgoulet.act.ulaval.ca/en/emacs/][here]].

On Windows 7, after running emacs:
Pin it to taskbar, modify the shortcut to =runemacs.exe= instead of
=emacs.exe=, and set it to run in XP SP3 compatibility mode (so the
shell can be switched to cygwin =bash= if desired.

** Adding elisp directory

Until the whole file gets migrated to =org-babel=, all of the
supporting lisp files need to get added to path.

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Emacs initialization

*** Benchmarking

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-benchmarking.el]].

#+begin_src emacs-lisp
  (defun wc/time-subtract-millis (b a)
    (* 1000.0 (float-time (time-subtract b a))))


  (defvar wc/require-times nil
    "A list of (FEATURE . LOAD-DURATION).
  LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

  (defadvice require
      (around build-require-times (feature &optional filename noerror) activate)
    "Note in `wc/require-times' the time taken to require each feature."
    (let* ((already-loaded (memq feature features))
           (require-start-time (and (not already-loaded) (current-time))))
      (prog1
          ad-do-it
        (when (and (not already-loaded) (memq feature features))
          (add-to-list 'wc/require-times
                       (cons feature
                             (wc/time-subtract-millis (current-time)
                                                             require-start-time))
                       t)))))
#+end_src

*** Additional global variables

#+begin_src emacs-lisp
  (defconst *spell-check-support-enabled* nil) ;; Enable with t if you prefer
  (defconst *is-mac* (eq system-type 'darwin))
  (defconst *is-linux* (eq system-type 'gnu/linux))
  (defconst *is-windows* (eq system-type 'windows-nt))
  (defconst *is-my-laptop* (eq system-name 'Will-MacBookPro))
  (defconst *is-my-desktop* (eq system-name 'UTILE-T1700-08))
#+end_src

*** Needed utilities

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-utils.el]].

#+begin_src emacs-lisp

  (if (fboundp 'with-eval-after-load)
      (defalias 'after-load 'with-eval-after-load)
    (defmacro after-load (feature &rest body)
      "After FEATURE is loaded, evaluate BODY."
      (declare (indent defun))
      `(eval-after-load ,feature
         '(progn ,@body))))


#+end_src

Handier way to add modes to =auto-mode-alist=.

#+begin_src emacs-lisp

  (defun add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

#+end_src

String utilities missing from core emacs

#+begin_src emacs-lisp

  (defun wc/string-all-matches (regex str &optional group)
    "Find all matches for `REGEX' within `STR', returning the full match string or group `GROUP'."
    (let ((result nil)
          (pos 0)
          (group (or group 0)))
      (while (string-match regex str pos)
        (push (match-string group str) result)
        (setq pos (match-end group)))
      result))

  (defun wc/string-rtrim (str)
    "Remove trailing whitespace from `STR'."
    (replace-regexp-in-string "[ \t\n]+$" "" str))

#+end_src

#+begin_src emacs-lisp




  ;;----------------------------------------------------------------------------
  ;; Find the directory containing a given library
  ;;----------------------------------------------------------------------------
  (autoload 'find-library-name "find-func")
  (defun wc/directory-of-library (library-name)
    "Return the directory in which the `LIBRARY-NAME' load file is found."
    (file-name-as-directory (file-name-directory (find-library-name library-name))))


  ;;----------------------------------------------------------------------------
  ;; Delete the current file
  ;;----------------------------------------------------------------------------
  (defun delete-this-file ()
    "Delete the current file, and kill the buffer."
    (interactive)
    (or (buffer-file-name) (error "No file is currently being edited"))
    (when (yes-or-no-p (format "Really delete '%s'?"
                               (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)))


  ;;----------------------------------------------------------------------------
  ;; Rename the current file
  ;;----------------------------------------------------------------------------
  (defun rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file!" name))
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (when (file-exists-p filename)
            (rename-file filename new-name 1))
          (rename-buffer new-name)
          (set-visited-file-name new-name)))))

  ;;----------------------------------------------------------------------------
  ;; Browse current HTML file
  ;;----------------------------------------------------------------------------
  (defun browse-current-file ()
    "Open the current file as a URL using `browse-url'."
    (interactive)
    (let ((file-name (buffer-file-name)))
      (if (tramp-tramp-file-p file-name)
          (error "Cannot open tramp file")
        (browse-url (concat "file://" file-name)))))


#+end_src

*** Packages

All the machinery for installing required packages.

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-elpa.el]].

#+begin_src emacs-lisp

  (require 'package)

  ;;; Set the repository list

  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")
                           ("gnu" . "http://elpa.gnu.org/packages/")))

  ;;; On-demand installation of packages

  (defun require-package (package &optional min-version no-refresh)
    "Install given PACKAGE, optionally requiring MIN-VERSION.
  If NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
    (if (package-installed-p package min-version)
        t
      (if (or (assoc package package-archive-contents) no-refresh)
          (package-install package)
        (progn
          (package-refresh-contents)
          (require-package package min-version t)))))


  (defun maybe-require-package (package &optional min-version no-refresh)
    "Try to install PACKAGE, and return non-nil if successful.
  In the event of failure, return nil and print a warning message.
  Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
  available package lists will not be re-downloaded in order to
  locate PACKAGE."
    (condition-case err
        (require-package package min-version no-refresh)
      (error
       (message "Couldn't install package `%s': %S" package err)
       nil)))

  ;;; Start package.el

  (setq package-enable-at-startup nil)
  (package-initialize)

  (require-package 'fullframe)
  (fullframe list-packages quit-window)

  (require-package 'cl-lib)
  (require 'cl-lib)

  (defun wc/set-tabulated-list-column-width (col-name width)
    "Set any column with name COL-NAME to the given WIDTH."
    (cl-loop for column across tabulated-list-format
             when (string= col-name (car column))
             do (setf (elt column 1) width)))

  (defun wc/maybe-widen-package-menu-columns ()
    "Widen some columns of the package menu table to avoid truncation."
    (when (boundp 'tabulated-list-format)
      (wc/set-tabulated-list-column-width "Version" 13)
      (let ((longest-archive-name (apply 'max (mapcar 'length (mapcar 'car package-archives)))))
        (wc/set-tabulated-list-column-width "Archive" longest-archive-name))))

  (add-hook 'package-menu-mode-hook 'wc/maybe-widen-package-menu-columns)


#+end_src

Use use-package.

#+begin_src emacs-lisp
  (require-package 'use-package)
  (require 'use-package)
#+end_src

Add support for bind-key.

#+begin_src emacs-lisp

(require-package 'bind-key)

#+end_src

*** Exec path

Set up the =$PATH=.

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-exec-path.el]].

#+begin_src emacs-lisp
(when *is-mac* (require-package 'exec-path-from-shell))

(after-load 'exec-path-from-shell
            (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE"))
              (add-to-list 'exec-path-from-shell-variables var)))


(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

#+end_src

*** Additional required packages to initialize first

#+begin_src emacs-lisp
  (require-package 'wgrep)
  (require-package 'project-local-variables)
  (require-package 'diminish)
  (require-package 'scratch)
  (require-package 'mwe-log-commands)
#+end_src

*** GUI Features

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-gui-frames.el]].

#+begin_src emacs-lisp
;;----------------------------------------------------------------------------
;; Stop C-z from minimizing windows under OS X
;;----------------------------------------------------------------------------
(defun wc/maybe-suspend-frame ()
  (interactive)
  (unless (and *is-mac* window-system)
    (suspend-frame)))

(global-set-key (kbd "C-z") 'wc/maybe-suspend-frame)


;;----------------------------------------------------------------------------
;; Suppress GUI features
;;----------------------------------------------------------------------------
(setq use-file-dialog nil)
(setq use-dialog-box nil)
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message t)

; Make scratch empty
(setq initial-scratch-message nil)

;;----------------------------------------------------------------------------
;; Show a marker in the left fringe for lines not in the buffer
;;----------------------------------------------------------------------------
(setq indicate-empty-lines t)


;;----------------------------------------------------------------------------
;; Window size and features
;;----------------------------------------------------------------------------
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'set-scroll-bar-mode)
  (set-scroll-bar-mode nil))

(let ((no-border '(internal-border-width . 0)))
  (add-to-list 'default-frame-alist no-border)
  (add-to-list 'initial-frame-alist no-border))

(defun wc/adjust-opacity (frame incr)
  "Adjust the background opacity of FRAME by increment INCR."
  (unless (display-graphic-p frame)
    (error "Cannot adjust opacity of this frame"))
  (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
         ;; The 'alpha frame param became a pair at some point in
         ;; emacs 24.x, e.g. (100 100)
         (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
         (newalpha (+ incr oldalpha)))
    (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
      (modify-frame-parameters frame (list (cons 'alpha newalpha))))))

(setq ns-use-native-fullscreen nil)
(when (and *is-mac* (fboundp 'toggle-frame-fullscreen))
  ;; Command-Option-f to toggle fullscreen mode
  ;; Hint: Customize `ns-use-native-fullscreen'
  (global-set-key (kbd "M-s-ƒ") 'toggle-frame-fullscreen))

;; TODO: use seethru package instead?
(global-set-key (kbd "M-C-8") (lambda () (interactive) (wc/adjust-opacity nil -2)))
(global-set-key (kbd "M-C-9") (lambda () (interactive) (wc/adjust-opacity nil 2)))
(global-set-key (kbd "M-C-0") (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))

(add-hook 'after-make-frame-functions
          (lambda (frame)
            (with-selected-frame frame
              (unless window-system
                (set-frame-parameter nil 'menu-bar-lines 0)))))

(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))

;; Non-zero values for `line-spacing' can mess up ansi-term and co,
;; so we zero it explicitly in those cases.
(add-hook 'term-mode-hook
          (lambda ()
            (setq line-spacing 0)))
#+end_src

*** Windows-specific issues

On Windows, fix errors with unsafe directories in Emacs server.
#+begin_src emacs-lisp
  (require 'server)
  (when *is-windows* (defun server-ensure-safe-dir (dir) "Noop" t))
#+end_src

*** Mac-specific issues

#+begin_src emacs-lisp
  ;;; Fix hard-links on Mac
  (when *is-mac*
    (setq backup-by-copying-when-linked t))

  (setq mac-command-modifier 'super)
  (setq mac-option-modifier 'meta)

  (defun swap-meta-and-super ()
    "Swap the mapping of meta and super. Very useful for people using their Mac
  with a Windows external keyboard from time to time."
    (interactive)
    (if (eq mac-command-modifier 'super)
        (progn
          (setq mac-command-modifier 'meta)
          (setq mac-option-modifier 'super)
          (message "Command is now bound to META and Option is bound to SUPER."))
      (progn
        (setq mac-command-modifier 'super)
        (setq mac-option-modifier 'meta)
        (message "Command is now bound to SUPER and Option is bound to META."))))

  (global-set-key (kbd "C-c w") 'swap-meta-and-super)
#+end_src

*** Miscellaneous shortcuts

#+begin_src emacs-lisp
  (require-package 'guru-mode)
  (require-package 'deft)

  ;;; Turn on time-stamp updating. Timestamp must be in first 8 lines of
  ;;;   file and look like:
  ;;;   Time-stamp: <2015-03-25 13:28:59 wcohen>
  (add-hook 'write-file-hooks 'time-stamp)

  ;;; Get current system's name
  (defun insert-system-name() (interactive)
         "Get current system's name"
         (insert (format "%s" system-name))
         )

  ;;; Get current system type
  (defun insert-system-type() (interactive)
         "Get current system type"
         (insert (format "%s" system-type))
         )

  ;; Insertion of Dates.
  (defun insert-date-string () (interactive)
         "Insert a nicely formated date string"
         (insert (format-time-string "%a %b %d %H:%M:%S %Y")))

  ;;; Open init.el in the .emacs.d folder.
  (defun find-dot-emacs () (interactive)
         "Try to find and open the dot emacs file"
         (let ((my-init-file (if (not user-init-file)
                                 "~/.emacs.d/init.el"
                               user-init-file)))
           (find-file my-init-file)))


  ;; C-c i calls insert-date-string
  (global-set-key (kbd "C-c i") 'insert-date-string)

  ;; C-c e reloads ~/.emacs.d/init.el
  (global-set-key (kbd "C-c e")
                  '(lambda ()
                     (interactive)
                     (load-file "~/.emacs.d/init.el")))


  ;;; Guru

  ;;; Enable guru-mode to stop using bad keybindings
  (require 'guru-mode)
  (guru-global-mode +1)

  ;; To enable it only for modes like prog-mode
  ;; (add-hook 'prog-mode-hook 'guru-mode)

  ;; To get warnings only for arrow keys
  (setq guru-warn-only t)

  ;;; Deft (for notes)
  (require 'deft)
  (setq deft-use-filename-as-title t)
#+end_src

*** Text editing and fill-mode

#+begin_src emacs-lisp
  (setq-default auto-fill-function 'do-auto-fill)
#+end_src

*** Indentation

Indent code automatically when yanking. Do it for ELisp, Lisp, Scheme,
Python, R, and JS.

#+begin_src emacs-lisp
  (dolist (command '(yank yank-pop))
    (eval `(defadvice ,command (after indent-region activate)
             (and (not current-prefix-arg)
                  (member major-mode
                          '(emacs-lisp-mode lisp-mode scheme-mode
                                            python-mode r-mode js3-mode
                                            ))
                  (let ((mark-even-if-inactive transient-mark-mode))
                    (indent-region (region-beginning) (region-end) nil))))))


  ;; Replace tabs with spaces
  (setq-default indent-tabs-mode nil)
#+end_src

*** Themes

Set default theme to zenburn.
Modified from [[https://github.com/purcell/emacs.d/blob/master/lisp/init-themes.el]].


#+begin_src emacs-lisp

(require-package 'zenburn-theme)


  (defun zenburn-init ()
    (load-theme 'zenburn)
    )

  (add-hook 'after-init-hook 'zenburn-init)
#+end_src

** Language support

*** Editing utils

From
[[https://github.com/purcell/emacs.d/blob/master/lisp/init-editing-utils.el]].

#+begin_src emacs-lisp
  (require-package 'unfill)

  (when (fboundp 'electric-pair-mode)
    (electric-pair-mode))
  (when (eval-when-compile (version< "24.4" emacs-version))
    (electric-indent-mode 1))

  ;;----------------------------------------------------------------------------
  ;; Some basic preferences
  ;;----------------------------------------------------------------------------
  (setq-default
   blink-cursor-interval 0.4
   bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
   buffers-menu-max-size 30
   case-fold-search t
   column-number-mode t
   delete-selection-mode t
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   indent-tabs-mode nil
   make-backup-files nil
   mouse-yank-at-point t
   save-interprogram-paste-before-kill t
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   ;; show-trailing-whitespace t
   show-trailing-whitespace nil
   tooltip-delay 1.5
   truncate-lines nil
   truncate-partial-width-windows nil
   visible-bell nil)

  (global-auto-revert-mode)
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)

  (transient-mark-mode t)

  ;;; Whitespace

  (defun wc/no-trailing-whitespace ()
    "Turn off display of trailing whitespace in this buffer."
    (setq show-trailing-whitespace nil))

  ;; But don't show trailing whitespace in SQLi, inf-ruby etc.
  (dolist (hook '(special-mode-hook
                  Info-mode-hook
                  eww-mode-hook
                  term-mode-hook
                  comint-mode-hook
                  compilation-mode-hook
                  twittering-mode-hook
                  minibuffer-setup-hook))
    (add-hook hook #'wc/no-trailing-whitespace))


  (require-package 'whitespace-cleanup-mode)
  (global-whitespace-cleanup-mode t)

  ;; To enable for a mode instead of using the global mode
  ;; (add-hook 'ruby-mode-hook 'whitespace-cleanup-mode)


  (global-set-key [remap just-one-space] 'cycle-spacing)

  ;;; Newline behaviour

  (global-set-key (kbd "RET") 'newline-and-indent)
  (defun wc/newline-at-end-of-line ()
    "Move to end of line, enter a newline, and reindent."
    (interactive)
    (move-end-of-line 1)
    (newline-and-indent))

  (global-set-key (kbd "S-<return>") 'wc/newline-at-end-of-line)



  (when (eval-when-compile (string< "24.3.1" emacs-version))
    ;; https://github.com/purcell/emacs.d/issues/138
    (after-load 'subword
      (diminish 'subword-mode)))



  (when (fboundp 'global-prettify-symbols-mode)
    (global-prettify-symbols-mode))


  (require-package 'undo-tree)
  (global-undo-tree-mode)
  (diminish 'undo-tree-mode)


  (require-package 'highlight-symbol)
  (dolist (hook '(prog-mode-hook html-mode-hook css-mode-hook))
    (add-hook hook 'highlight-symbol-mode)
    (add-hook hook 'highlight-symbol-nav-mode))
  (add-hook 'org-mode-hook 'highlight-symbol-nav-mode)
  (after-load 'highlight-symbol
    (diminish 'highlight-symbol-mode)
    (defadvice highlight-symbol-temp-highlight (around wc/maybe-suppress activate)
      "Suppress symbol highlighting while isearching."
      (unless isearch-mode ad-do-it)))

  ;;----------------------------------------------------------------------------
  ;; Zap *up* to char is a handy pair for zap-to-char
  ;;----------------------------------------------------------------------------
  (autoload 'zap-up-to-char "misc" "Kill up to, but not including ARGth occurrence of CHAR.")
  (global-set-key (kbd "M-Z") 'zap-up-to-char)



  (require-package 'browse-kill-ring)
  (setq browse-kill-ring-separator "\f")
  (after-load 'page-break-lines
    (push 'browse-kill-ring-mode page-break-lines-modes))


  ;;----------------------------------------------------------------------------
  ;; Don't disable narrowing commands
  ;;----------------------------------------------------------------------------
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)

  ;;----------------------------------------------------------------------------
  ;; Show matching parens
  ;;----------------------------------------------------------------------------
  (show-paren-mode 1)

  ;;----------------------------------------------------------------------------
  ;; Expand region
  ;;----------------------------------------------------------------------------
  (require-package 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)


  ;;----------------------------------------------------------------------------
  ;; Don't disable case-change functions
  ;;----------------------------------------------------------------------------
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)


  ;;----------------------------------------------------------------------------
  ;; Rectangle selections, and overwrite text when the selection is active
  ;;----------------------------------------------------------------------------
  (cua-selection-mode t)                  ; for rectangles, CUA is nice


  ;;----------------------------------------------------------------------------
  ;; Handy key bindings
  ;;----------------------------------------------------------------------------
  ;; To be able to M-x without meta
  (global-set-key (kbd "C-x C-m") 'execute-extended-command)

  ;; Vimmy alternatives to M-^ and C-u M-^
  (global-set-key (kbd "C-c j") 'join-line)
  (global-set-key (kbd "C-c J") (lambda () (interactive) (join-line 1)))

  (global-set-key (kbd "C-.") 'set-mark-command)
  (global-set-key (kbd "C-x C-.") 'pop-global-mark)

  (require-package 'ace-jump-mode)
  (global-set-key (kbd "C-;") 'ace-jump-mode)
  (global-set-key (kbd "C-:") 'ace-jump-word-mode)


  (require-package 'multiple-cursors)
  ;; multiple-cursors
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-+") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  ;; From active region to multiple cursors:
  (global-set-key (kbd "C-c c r") 'set-rectangular-region-anchor)
  (global-set-key (kbd "C-c c c") 'mc/edit-lines)
  (global-set-key (kbd "C-c c e") 'mc/edit-ends-of-lines)
  (global-set-key (kbd "C-c c a") 'mc/edit-beginnings-of-lines)


  ;; Train myself to use M-f and M-b instead
  (global-unset-key [M-left])
  (global-unset-key [M-right])



  (defun kill-back-to-indentation ()
    "Kill from point back to the first non-whitespace character on the line."
    (interactive)
    (let ((prev-pos (point)))
      (back-to-indentation)
      (kill-region (point) prev-pos)))

  (global-set-key (kbd "C-M-<backspace>") 'kill-back-to-indentation)


  ;;----------------------------------------------------------------------------
  ;; Page break lines
  ;;----------------------------------------------------------------------------
  (require-package 'page-break-lines)
  (global-page-break-lines-mode)
  (diminish 'page-break-lines-mode)

  ;;----------------------------------------------------------------------------
  ;; Fill column indicator
  ;;----------------------------------------------------------------------------
  (when (eval-when-compile (> emacs-major-version 23))
    (require-package 'fill-column-indicator)
    (defun wc/prog-mode-fci-settings ()
      (turn-on-fci-mode)
      (when show-trailing-whitespace
        (set (make-local-variable 'whitespace-style) '(face trailing))
        (whitespace-mode 1)))

    ;;(add-hook 'prog-mode-hook 'wc/prog-mode-fci-settings)

    (defun wc/fci-enabled-p ()
      (and (boundp 'fci-mode) fci-mode))

    (defvar wc/fci-mode-suppressed nil)
    (defadvice popup-create (before suppress-fci-mode activate)
      "Suspend fci-mode while popups are visible"
      (let ((fci-enabled (wc/fci-enabled-p)))
        (when fci-enabled
          (set (make-local-variable 'wc/fci-mode-suppressed) fci-enabled)
          (turn-off-fci-mode))))
    (defadvice popup-delete (after restore-fci-mode activate)
      "Restore fci-mode when all popups have closed"
      (when (and wc/fci-mode-suppressed
                 (null popup-instances))
        (setq wc/fci-mode-suppressed nil)
        (turn-on-fci-mode)))

    ;; Regenerate fci-mode line images after switching themes
    (defadvice enable-theme (after recompute-fci-face activate)
      (dolist (buffer (buffer-list))
        (with-current-buffer buffer
          (when (wc/fci-enabled-p)
            (turn-on-fci-mode))))))


  ;;----------------------------------------------------------------------------
  ;; Shift lines up and down with M-up and M-down. When paredit is enabled,
  ;; it will use those keybindings. For this reason, you might prefer to
  ;; use M-S-up and M-S-down, which will work even in lisp modes.
  ;;----------------------------------------------------------------------------
  (require-package 'move-dup)
  (global-set-key [M-up] 'md/move-lines-up)
  (global-set-key [M-down] 'md/move-lines-down)
  (global-set-key [M-S-up] 'md/move-lines-up)
  (global-set-key [M-S-down] 'md/move-lines-down)

  (global-set-key (kbd "C-c p") 'md/duplicate-down)
  (global-set-key (kbd "C-c P") 'md/duplicate-up)

  ;;----------------------------------------------------------------------------
  ;; Fix backward-up-list to understand quotes, see http://bit.ly/h7mdIL
  ;;----------------------------------------------------------------------------
  (defun backward-up-sexp (arg)
    "Jump up to the start of the ARG'th enclosing sexp."
    (interactive "p")
    (let ((ppss (syntax-ppss)))
      (cond ((elt ppss 3)
             (goto-char (elt ppss 8))
             (backward-up-sexp (1- arg)))
            ((backward-up-list arg)))))

  (global-set-key [remap backward-up-list] 'backward-up-sexp) ; C-M-u, C-M-up


  ;;----------------------------------------------------------------------------
  ;; Cut/copy the current line if no region is active
  ;;----------------------------------------------------------------------------
  (require-package 'whole-line-or-region)
  (whole-line-or-region-mode t)
  (diminish 'whole-line-or-region-mode)
  (make-variable-buffer-local 'whole-line-or-region-mode)

  (defun suspend-mode-during-cua-rect-selection (mode-name)
    "Add an advice to suspend `MODE-NAME' while selecting a CUA rectangle."
    (let ((flagvar (intern (format "%s-was-active-before-cua-rectangle" mode-name)))
          (advice-name (intern (format "suspend-%s" mode-name))))
      (eval-after-load 'cua-rect
        `(progn
           (defvar ,flagvar nil)
           (make-variable-buffer-local ',flagvar)
           (defadvice cua--activate-rectangle (after ,advice-name activate)
             (setq ,flagvar (and (boundp ',mode-name) ,mode-name))
             (when ,flagvar
               (,mode-name 0)))
           (defadvice cua--deactivate-rectangle (after ,advice-name activate)
             (when ,flagvar
               (,mode-name 1)))))))

  (suspend-mode-during-cua-rect-selection 'whole-line-or-region-mode)


  

  (defun wc/open-line-with-reindent (n)
    "A version of `open-line' which reindents the start and end positions.
  If there is a fill prefix and/or a `left-margin', insert them
  on the new line if the line would have been blank.
  With arg N, insert N newlines."
    (interactive "*p")
    (let* ((do-fill-prefix (and fill-prefix (bolp)))
           (do-left-margin (and (bolp) (> (current-left-margin) 0)))
           (loc (point-marker))
           ;; Don't expand an abbrev before point.
           (abbrev-mode nil))
      (delete-horizontal-space t)
      (newline n)
      (indent-according-to-mode)
      (when (eolp)
        (delete-horizontal-space t))
      (goto-char loc)
      (while (> n 0)
        (cond ((bolp)
               (if do-left-margin (indent-to (current-left-margin)))
               (if do-fill-prefix (insert-and-inherit fill-prefix))))
        (forward-line 1)
        (setq n (1- n)))
      (goto-char loc)
      (end-of-line)
      (indent-according-to-mode)))

  (global-set-key (kbd "C-o") 'wc/open-line-with-reindent)


  ;;----------------------------------------------------------------------------
  ;; Random line sorting
  ;;----------------------------------------------------------------------------
  (defun sort-lines-random (beg end)
    "Sort lines in region randomly."
    (interactive "r")
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char (point-min))
        (let ;; To make `end-of-line' and etc. to ignore fields.
            ((inhibit-field-text-motion t))
          (sort-subr nil 'forward-line 'end-of-line nil nil
                     (lambda (s1 s2) (eq (random 2) 0)))))))







  

  (require-package 'highlight-escape-sequences)
  (hes-mode)

  
  (require-package 'guide-key)
  (setq guide-key/guide-key-sequence '("C-x" "C-c" "C-x 4" "C-x 5" "C-c ;" "C-c ; f" "C-c ' f" "C-x n" "C-x C-r" "C-x r"))
  (guide-key-mode 1)
  (diminish 'guide-key-mode)

#+end_src

*** Paredit

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-paredit.el]].

#+begin_src emacs-lisp
  (require-package 'paredit)
  (autoload 'enable-paredit-mode "paredit")

  (defun maybe-map-paredit-newline ()
    (unless (or (memq major-mode '(inferior-emacs-lisp-mode cider-repl-mode))
                (minibufferp))
      (local-set-key (kbd "RET") 'paredit-newline)))

  (add-hook 'paredit-mode-hook 'maybe-map-paredit-newline)

  (after-load 'paredit
    (diminish 'paredit-mode " Par")
    (dolist (binding (list (kbd "C-<left>") (kbd "C-<right>")
                           (kbd "C-M-<left>") (kbd "C-M-<right>")))
      (define-key paredit-mode-map binding nil))

    ;; Disable kill-sentence, which is easily confused with the kill-sexp
    ;; binding, but doesn't preserve sexp structure
    (define-key paredit-mode-map [remap kill-sentence] nil)
    (define-key paredit-mode-map [remap backward-kill-sentence] nil)

    ;; Allow my global binding of M-? to work when paredit is active
    (define-key paredit-mode-map (kbd "M-?") nil))


  ;; Compatibility with other modes

  (suspend-mode-during-cua-rect-selection 'paredit-mode)


  ;; Use paredit in the minibuffer
  ;; TODO: break out into separate package
  ;; http://emacsredux.com/blog/2013/04/18/evaluate-emacs-lisp-in-the-minibuffer/
  (add-hook 'minibuffer-setup-hook 'conditionally-enable-paredit-mode)

  (defvar paredit-minibuffer-commands '(eval-expression
                                        pp-eval-expression
                                        eval-expression-with-eldoc
                                        ibuffer-do-eval
                                        ibuffer-do-view-and-eval)
    "Interactive commands for which paredit should be enabled in the minibuffer.")

  (defun conditionally-enable-paredit-mode ()
    "Enable paredit during lisp-related minibuffer commands."
    (if (memq this-command paredit-minibuffer-commands)
        (enable-paredit-mode)))

  ;; ----------------------------------------------------------------------------
  ;; Enable some handy paredit functions in all prog modes
  ;; ----------------------------------------------------------------------------

  (require-package 'paredit-everywhere)
  (add-hook 'prog-mode-hook 'paredit-everywhere-mode)
  (add-hook 'css-mode-hook 'paredit-everywhere-mode)

#+end_src

*** R

Packages to install when not Windows.


#+begin_src emacs-lisp
  (when (not *is-windows*) (require-package 'ess))
#+end_src

*** Postgres

Set up sql-postgres mode to by default as for ports as well

#+begin_src emacs-lisp
  (setq sql-postgres-login-params
        '((user :default "postgres")
          (database :default "postgres")
          (server :default "localhost")
          (port :default 5432)))

  ;;; On Windows, use the Cygwin psql client instead (and be sure it is
  ;;; installed).

  (when *is-my-desktop*
    (setq sql-postgres-program "C:/cygwin64/bin/psql.exe"))
#+end_src

*** Clojure

#+begin_src emacs-lisp
  (require-package 'cider)

  ;;; Clojure
  ;;; Be sure that Leiningen is installed.
  ;;; Add these lines to ~/.lein/profiles.clj
  ;;; {:user {:plugins [[cider/cider-nrepl "0.9.0-SNAPSHOT"]]}}

  ;;; Until leiningen is updated, also force nrepl 0.2.7
  ;;; {:user {:plugins [[cider/cider-nrepl "0.9.0-SNAPSHOT"]]
  ;;; :dependencies [[org.clojure/tools.nrepl "0.2.7"]]}}

#+end_src

*** TRAMP for remote editing

On Windows, use PuTTY/plink to open files, using the following
syntax. Be sure that PuTTY's folder is in the Windows path.
/plink:user@remotehost:/remotepath
/plink:user@remotehost|sudo:remotehost:/remotepath

#+begin_src emacs-lisp
  (require 'tramp)
  (when *is-my-desktop*
    (setq tramp-default-method "plink")
    )
#+end_src

*** Fonts

Note that the OTF of Inconsolata on Windows looks blurry, so use
OTF on Mac (and Linux?) and TTF on Windows.

On my laptop
#+begin_src emacs-lisp
  (when *is-my-laptop*
    (set-face-attribute 'default nil :font "Inconsolata-14")
    )
#+end_src

On my desktop
#+begin_src emacs-lisp
  (when *is-my-desktop*
    (set-face-attribute 'default nil :font "Source Code Pro-10")
    )
#+end_src

*** Helm

Initialize the packages.

#+begin_src emacs-lisp
   (require-package 'helm)
   (require-package 'helm-projectile)

  (require 'helm)
   (require 'helm-config)

#+end_src

The default "C-x c" is quite close to "C-x C-c", which quits
Emacs. Changed to "C-c h". Note: We must set "C-c h" globally, because
we cannot change `helm-command-prefix-key' once `helm-config' is loaded.

#+begin_src emacs-lisp
   (global-set-key (kbd "C-c h") 'helm-command-prefix)
   (global-unset-key (kbd "C-x c"))

   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
   (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
   (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

#+end_src

Use curl.

#+begin_src emacs-lisp
   (when (executable-find "curl")
     (setq helm-google-suggest-use-curl-p t))
#+end_src


Arrange helm windows more nicely.

#+begin_src emacs-lisp
   (setq helm-split-window-in-side-p t ; open helm buffer inside current
                                           ; window, not occupy whole other
                                           ; window
         helm-move-to-line-cycle-in-source t ; move to end or beginning
                                           ; of source when reaching top
                                           ; or bottom of source.
         helm-ff-search-library-in-sexp t ; search for library in
                                           ; `require' and
                                           ; `declare-function' sexp.
         helm-scroll-amount 8 ; scroll 8 lines other window using
                                           ; M-<next>/M-<prior>
         helm-ff-file-name-history-use-recentf t)
#+end_src


Activate helm.

#+begin_src emacs-lisp

   (helm-mode 1)

   (helm-autoresize-mode t)


#+end_src


Set a variable for helm so it can work with golden-ratio.

#+begin_src emacs-lisp

   (defun wc/helm-alive-p ()
     (if (boundp 'helm-alive-p)
         (symbol-value 'helm-alive-p)))

#+end_src


Set helm keys to be global defaults when possible, for M-x, kill ring,
and helm-mini.

#+begin_src emacs-lisp

   ;;; Improved M-x
   (global-set-key (kbd "M-x") 'helm-M-x)
   (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

   (global-set-key (kbd "M-y") 'helm-show-kill-ring)

   ;;; Helm-mini
   (global-set-key (kbd "C-x b") 'helm-mini)
   (setq helm-buffers-fuzzy-matching t
         helm-recentf-fuzzy-match    t)

#+end_src

Helm search on Windows uses everything. It needs to identify =es.exe=,
and it'd be nice to open file paths in Explorer.

#+begin_src emacs-lisp

   (when *is-windows* (add-to-list 'load-path "~/bin"))
   (when *is-windows* (global-set-key (kbd "C-c h o") 'helm-w32-shell-execute-open-file))

#+end_src

Set helm to work with projectile.

#+begin_src emacs-lisp

   (projectile-global-mode)
   (setq projectile-completion-system 'helm)
   (helm-projectile-on)
#+end_src

Attempt to speed helm up.

#+begin_src emacs-lisp
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
#+end_src


Turns off ido mode in case I enabled it elsewhere accidentally.


#+begin_src emacs-lisp
  (ido-mode -1)
#+end_src


*** Javascript

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-javascript.el]].

#+begin_src emacs-lisp
  (require-package 'json-mode)
  (maybe-require-package 'js2-mode)
  (maybe-require-package 'ac-js2)
  (maybe-require-package 'coffee-mode)
  (require-package 'js-comint)

  (defcustom preferred-javascript-mode
    (first (remove-if-not #'fboundp '(js2-mode js-mode)))
    "Javascript mode to use for .js files."
    :type 'symbol
    :group 'programming
    :options '(js2-mode js-mode))
  (defvar preferred-javascript-indent-level 2)

  ;; Need to first remove from list if present, since elpa adds entries too, which
  ;; may be in an arbitrary order
  (eval-when-compile (require 'cl))
  (setq auto-mode-alist (cons `("\\.js\\(\\.erb\\)?\\'" . ,preferred-javascript-mode)
                              (loop for entry in auto-mode-alist
                                    unless (eq preferred-javascript-mode (cdr entry))
                                    collect entry)))


  ;; js2-mode
  (after-load 'js2-mode
    ;; Disable js2 mode's syntax error highlighting by default...
    (setq-default js2-mode-show-parse-errors nil
                  js2-mode-show-strict-warnings nil)
    ;; ... but enable it if flycheck can't handle javascript
    (autoload 'flycheck-get-checker-for-buffer "flycheck")
    (defun wc/disable-js2-checks-if-flycheck-active ()
      (unless (flycheck-get-checker-for-buffer)
        (set (make-local-variable 'js2-mode-show-parse-errors) t)
        (set (make-local-variable 'js2-mode-show-strict-warnings) t)))
    (add-hook 'js2-mode-hook 'wc/disable-js2-checks-if-flycheck-active)

    (add-hook 'js2-mode-hook (lambda () (setq mode-name "JS2")))

    (setq-default
     js2-basic-offset preferred-javascript-indent-level
     js2-bounce-indent-p nil)

    (after-load 'js2-mode
      (js2-imenu-extras-setup)))

  ;; js-mode
  (setq-default js-indent-level preferred-javascript-indent-level)


  (add-to-list 'interpreter-mode-alist (cons "node" preferred-javascript-mode))

  
  ;; Javascript nests {} and () a lot, so I find this helpful

  (require-package 'rainbow-delimiters)
  (dolist (hook '(js2-mode-hook js-mode-hook json-mode-hook))
    (add-hook hook 'rainbow-delimiters-mode))


  
  ;;; Coffeescript

  (after-load 'coffee-mode
    (setq coffee-js-mode preferred-javascript-mode
          coffee-tab-width preferred-javascript-indent-level))

  (when (fboundp 'coffee-mode)
    (add-to-list 'auto-mode-alist '("\\.coffee\\.erb\\'" . coffee-mode)))

  ;; ---------------------------------------------------------------------------
  ;; Run and interact with an inferior JS via js-comint.el
  ;; ---------------------------------------------------------------------------

  (setq inferior-js-program-command "js")

  (defvar inferior-js-minor-mode-map (make-sparse-keymap))
  (define-key inferior-js-minor-mode-map "\C-x\C-e" 'js-send-last-sexp)
  (define-key inferior-js-minor-mode-map "\C-\M-x" 'js-send-last-sexp-and-go)
  (define-key inferior-js-minor-mode-map "\C-cb" 'js-send-buffer)
  (define-key inferior-js-minor-mode-map "\C-c\C-b" 'js-send-buffer-and-go)
  (define-key inferior-js-minor-mode-map "\C-cl" 'js-load-file-and-go)

  (define-minor-mode inferior-js-keys-mode
    "Bindings for communicating with an inferior js interpreter."
    nil " InfJS" inferior-js-minor-mode-map)

  (dolist (hook '(js2-mode-hook js-mode-hook))
    (add-hook hook 'inferior-js-keys-mode))

  ;; ---------------------------------------------------------------------------
  ;; Alternatively, use skewer-mode
  ;; ---------------------------------------------------------------------------

  (when (maybe-require-package 'skewer-mode)
    (after-load 'skewer-mode
      (add-hook 'skewer-mode-hook
                (lambda () (inferior-js-keys-mode -1)))))


#+end_src

*** Python

Use elpy. In addition to the package for emacs, need to install =jedi=
and =flake8= using =pip=.

#+begin_src emacs-lisp
  (require-package 'elpy)

  (elpy-enable)

#+end_src

*** Lisp

Scheme and Racket

#+begin_src emacs-lisp
  (require-package 'geiser)

  (when *is-my-laptop*
    (setq geiser-racket-binary
          "/Applications/Racket v6.1.1/bin/racket"))

#+end_src

*** Web

#+begin_src emacs-lisp
  (require-package 'web-mode)

  ;;; Web-Mode (JavaScript/HTML in combined files)

  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  ;;; Web-Mode doesn't color hex codes in SCSS, so do this separately

  ;;; This takes a color (later referenced in add-syntax-color-hex as
  ;;; the background color), and chooses light or dark depending on how
  ;;; light it is. This function is used in add-syntax-color-hex to
  ;;; determine the foreground. This was adapted from web-mode.
  (defun syntax-colorize-foreground (color)
    "Colorize foreground based on background luminance."
    (let* ((values (x-color-values color))
           (r (car values))
           (g (cadr values))
           (b (car (cdr (cdr values)))))
      (if (> 128.0 (floor (+ (* .3 r) (* .59 g) (* .11 b)) 256))
          "white" "black")))

  (defun add-syntax-color-hex ()
    "Syntax color hex color spec such as 「#ff1100」 in current buffer."
    (interactive)
    (font-lock-add-keywords
     nil
     '(("#[abcdef[:digit:]]\\{3,6\\}"
        (0 (put-text-property
            (match-beginning 0)
            (match-end 0)
            'face (list :background (match-string-no-properties 0)
                        :foreground (syntax-colorize-foreground
                                     (match-string-no-properties
                                      0))))))))
    (font-lock-fontify-buffer)
    )
  (add-hook 'css-mode-hook 'add-syntax-color-hex)

  ;;; Web-Mode Indentation
  (defun web-mode-hook-settings ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-indent-style 2)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    (idle-highlight-mode 0)
    ;;    (font-lock-mode 0)
    )

  (add-hook 'web-mode-hook 'web-mode-hook-settings)

#+end_src


** Navigation

*** Pop to mark

Handy way of getting back to previous places.

#+BEGIN_SRC emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+END_SRC
*** Helm-swoop - quickly finding lines

This promises to be a fast way to find things. Let's bind it to =Ctrl-Shift-S= to see if I can get used to that...

#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :defer t
    :ensure
    :bind
   (("C-S-s" . helm-swoop)
    ("M-i" . helm-swoop)
    ("M-s s" . helm-swoop)
    ("M-s M-s" . helm-swoop)
    ("M-I" . helm-swoop-back-to-last-point)
    ("C-c M-i" . helm-multi-swoop)
    ("C-x M-i" . helm-multi-swoop-all)
    )
   :config
   (progn
     (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
     (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop))
  )
#+END_SRC

*** Frequently-accessed files
Registers allow you to jump to a file or other location quickly. To
jump to a register, use =C-x r j= followed by the letter of the
register. Using registers for all these file shortcuts is probably a
bit of a waste since I can easily define my own keymap, but since I
rarely go beyond register A anyway. Also, I might as well add
shortcuts for refiling.


#+BEGIN_SRC emacs-lisp
(defvar wc/refile-map (make-sparse-keymap))

(defmacro wc/defshortcut (key file)
  `(progn
     (set-register ,key (cons 'file ,file))
     (define-key wc/refile-map
       (char-to-string ,key)
       (lambda (prefix)
         (interactive "p")
         (let ((org-refile-targets '(((,file) :maxlevel . 6)))
               (current-prefix-arg (or current-prefix-arg '(4))))
           (call-interactively 'org-refile))))))

(wc/defshortcut ?i "~/.emacs.d/wcohen.org")
(wc/defshortcut ?o "~/org/organizer.org")
(wc/defshortcut ?w "~/org/work.org")
#+END_SRC

Add shortcut for =jump-to-register=.

#+begin_src emacs-lisp
  (bind-key "C-c g" 'jump-to-register)
#+end_src

** Org

See [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]] for org info.

*** My files

These are the org files I use.

| organizer.org | Main Org file, for M-x org-capture, tasks, weekly reviews |
| work.org      | Work-related notes and TODOs                              |
|               |                                                           |

*** Modules

Modules that are being used for org.

#+begin_src emacs-lisp
  (setq org-modules '(org-bbdb
                      org-gnus
                      org-drill
                      org-info
                      org-jsinfo
                      org-habit
                      org-irc
                      org-mouse
                      org-annotate-file
                      org-eval
                      org-expiry
                      org-interactive-query
                      org-man
                      org-collector
                      org-panel
                      org-screen
                      org-toc))
  (eval-after-load 'org
    '(org-load-modules-maybe t))
  (setq org-expiry-inactive-timestamps t)
#+end_src

*** Navigation

From http://stackoverflow.com/questions/15011703/is-there-an-emacs-org-mode-command-to-jump-to-an-org-heading
#+begin_src emacs-lisp
  (setq org-goto-interface 'outline
        org-goto-max-level 10)
  (require 'imenu)
  (setq org-startup-folded nil)
  (bind-key "C-c j" 'org-clock-goto) ;; jump to current task from anywhere
  (bind-key "C-c C-w" 'org-refile)
  (setq org-cycle-include-plain-lists 'integrate)
#+end_src

**** Link Org subtrees and navigate between them
  The following code makes it easier for me to link trees with entries, as in http://sachachua.com/evil-plans

  #+begin_src emacs-lisp
  (defun wc/org-follow-entry-link ()
    "Follow the defined link for this entry."
    (interactive)
    (if (org-entry-get (point) "LINK")
        (org-open-link-from-string (org-entry-get (point) "LINK"))
      (org-open-at-point)))

  (bind-key "C-c o" 'wc/org-follow-entry-link org-mode-map)

  (defun wc/org-link-projects (location)
    "Add link properties between the current subtree and the one specified by LOCATION."
    (interactive
     (list (let ((org-refile-use-cache nil))
       (org-refile-get-location "Location"))))
    (let ((link1 (org-store-link nil)) link2)
      (save-window-excursion
        (org-refile 4 nil location)
        (setq link2 (org-store-link nil))
        (org-set-property "LINK" link1))
      (org-set-property "LINK" link2)))
  #+end_src

**** Viewing, navigating, and editing the Org tree

      I often cut and paste subtrees. This makes it easier to cut
      something and paste it elsewhere in the hierarchy.
      #+begin_src emacs-lisp
        (eval-after-load 'org
          '(progn
             (bind-key "C-c k" 'org-cut-subtree org-mode-map)
             (setq org-yank-adjusted-subtrees t)))
  #+end_src

*** Keyboard shortcuts

#+begin_src emacs-lisp
  (bind-key "C-c r" 'org-capture)
  (bind-key "C-c a" 'org-agenda)
  (bind-key "C-c l" 'org-store-link)
  (bind-key "C-c L" 'org-insert-link-global)
  (bind-key "C-c O" 'org-open-at-point-global)
  (bind-key "<f9> <f9>" 'org-agenda-list)
  (bind-key "<f9> <f8>" (lambda () (interactive) (org-capture nil "r")))
  (bind-key "C-TAB" 'org-cycle org-mode-map)
  (bind-key "C-c v" 'org-show-todo-tree org-mode-map)
  (bind-key "C-c C-r" 'org-refile org-mode-map)
  (bind-key "C-c R" 'org-reveal org-mode-map)
#+end_src

=append-next-kill= is more useful than =org-table-copy-region=.

#+begin_src emacs-lisp
  (eval-after-load 'org
    '(bind-key "C-M-w" 'append-next-kill org-mode-map))
#+end_src

#+RESULTS:
: append-next-kill

Instead of using diary, make the clock easier to access.

#+begin_src emacs-lisp
  (eval-after-load 'org-agenda
    '(bind-key "i" 'org-agenda-clock-in org-agenda-mode-map))
#+end_src

**** Speed commands

To act quickly on tasks.

#+begin_src emacs-lisp
  (setq org-use-effective-time t)

  (defun wc/org-use-speed-commands-for-headings-and-lists ()
    "Activate speed commands on list items too."
    (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
        (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))
  (setq org-use-speed-commands 'wc/org-use-speed-commands-for-headings-and-lists)

  (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
  (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
  (add-to-list 'org-speed-commands-user '("!" wc/org-clock-in-and-track))
  (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
  (add-to-list 'org-speed-commands-user '("d" wc/org-move-line-to-destination))
  (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
  (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
  (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
  (bind-key "!" 'wc/org-clock-in-and-track org-agenda-mode-map)
#+end_src

*** Taking notes


Org files live in =~/org=, which is actually a symlink (=ln -s= on
Mac) to a shared directory in Dropbox. This allows the notes to sync
between different computers with different Dropbox accounts.


#+begin_src emacs-lisp
  (setq org-directory "~/org")
  (setq org-default-notes-file "~/org/organizer.org")
#+end_src

To add links from outside.

#+begin_src emacs-lisp
  (defun wc/yank-more ()
    (interactive)
    (insert "[[")
    (yank)
    (insert "][more]]"))
  (global-set-key (kbd "<f6>") 'wc/yank-more)
#+end_src

**** Date trees

Inserts a same-level heading for the next day.

#+begin_src emacs-lisp
(defun wc/org-insert-heading-for-next-day ()
  "Insert a same-level heading for the following day."
  (interactive)
  (let ((new-date
         (seconds-to-time
          (+ 86400.0
             (float-time
              (org-read-date nil 'to-time (elt (org-heading-components) 4)))))))
    (org-insert-heading-after-current)
    (insert (format-time-string "%Y-%m-%d\n\n" new-date))))
#+end_src

**** Templates

Use =org-capture= templates to jot down tasks, notes, and other pieces
of info.

#+begin_src emacs-lisp
  (defvar wc/org-basic-task-template "* TODO %^{Task}
  SCHEDULED: %^t
  :PROPERTIES:
  :Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
  :END:
  %?
  " "Basic task data")
  (setq org-capture-templates
        `(("t" "Tasks" entry
           (file+headline "~/org/organizer.org" "Tasks")
           ,wc/org-basic-task-template)
          ("T" "Quick task" entry
           (file+headline "~/org/organizer.org" "Tasks")
           "* TODO %^{Task}"
           :immediate-finish t)
          ;; ("e" "Emacs idea" entry
          ;;  (file+headline "~/code/dev/emacs-notes/tasks.org" "Emacs")
          ;;  "* TODO %^{Task}"
          ;;  :immediate-finish t)
          ("b" "Business task" entry
           (file+headline "~/org/work.org" "Tasks")
           ,wc/org-basic-task-template)
  ;;         ("p" "People task" entry
  ;;          (file+headline "~/personal/people.org" "Tasks")
  ;;          ,wc/org-basic-task-template)
  ;;         ("j" "Journal entry" plain
  ;;          (file+datetree "~/personal/journal.org")
  ;;          "%K - %a\n%i\n%?\n"
  ;;          :unnarrowed t)
  ;;         ("J" "Journal entry with date" plain
  ;;          (file+datetree+prompt "~/personal/journal.org")
  ;;          "%K - %a\n%i\n%?\n"
  ;;          :unnarrowed t)
  ;;         ("s" "Journal entry with date, scheduled" entry
  ;;          (file+datetree+prompt "~/personal/journal.org")
  ;;          "%K - %a\n%i\n%?\n"
  ;;          :unnarrowed t)
  ;;         ("db" "Done - Business" entry
  ;;          (file+headline "~/personal/business.org" "Tasks")
  ;;          "* DONE %^{Task}\nSCHEDULED: %^t\n%?")
  ;;         ("dp" "Done - People" entry
  ;;          (file+headline "~/personal/people.org" "Tasks")
  ;;          "* DONE %^{Task}\nSCHEDULED: %^t\n%?")
  ;;         ("dt" "Done - Task" entry
  ;;          (file+headline "~/personal/organizer.org" "Tasks")
  ;;          "* DONE %^{Task}\nSCHEDULED: %^t\n%?")
  ;;         ("q" "Quick note" item
  ;;          (file+headline "~/personal/organizer.org" "Quick notes"))
  ;;         ("l" "Ledger entries")
  ;;         ("lm" "MBNA" plain
  ;;          (file "~/personal/ledger")
  ;;          "%(org-read-date) %^{Payee}
  ;;   Liabilities:MBNA
  ;;   Expenses:%^{Account}  $%^{Amount}
  ;; " :immediate-finish t)
  ;;         ("ln" "No Frills" plain
  ;;          (file "~/personal/ledger")
  ;;          "%(let ((org-read-date-prefer-future nil)) (org-read-date)) * No Frills
  ;;   Liabilities:MBNA
  ;;   Assets:Wayne:Groceries  $%^{Amount}
  ;; " :immediate-finish t)
  ;;         ("lc" "Cash" plain
  ;;          (file "~/personal/ledger")
  ;;          "%(org-read-date) * %^{Payee}
  ;;   Expenses:Cash
  ;;   Expenses:%^{Account}  %^{Amount}
  ;; ")
  ;;         ("b" "Book" entry
  ;;          (file+datetree "~/personal/books.org" "Inbox")
  ;;          "* %^{Title}  %^g
  ;; %i
  ;; *Author(s):* %^{Author} \\\\
  ;; *ISBN:* %^{ISBN}

  ;; %?

  ;; *Review on:* %^t \\
  ;; %a
  ;; %U"
  ;;          :clock-in :clock-resume)
  ;;          ("c" "Contact" entry (file "~/org/contacts.org")
  ;;           "* %(org-contacts-template-name)
  ;; :PROPERTIES:
  ;; :EMAIL: %(org-contacts-template-email)
  ;; :END:")
  ;;          ("n" "Daily note" table-line (file+olp "~/org/organizer.org" "Daily notes")
  ;;           "| %u | %^{Note} |"
  ;;           :immediate-finish t)
  ;;          ("r" "Notes" entry
  ;;           (file+datetree "~/org/organizer.org")
  ;;           "* %?\n\n%i\n"
  ;;           )
           ))
  (bind-key "C-M-r" 'org-capture)
#+end_src


*** Tasks

**** Managing tasks

***** Track TODO state

The parentheses indicate keyboard shortcuts that I can use to set the
 task state. =@= and =!= toggle logging. =@= prompts you for a note,
 and =!= automatically logs the timestamp of the state change.

 #+begin_src emacs-lisp
        (setq org-todo-keywords
         '((sequence
            "TODO(t)"  ; next action
            "STARTED(s)"
            "WAITING(w@/!)"
            "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")
           (sequence "LEARN" "DO" "TEACH" "|" "COMPLETE(x)")
           (sequence "TODELEGATE(-)" "DELEGATED(d)" "|" "COMPLETE(x)")))
 #+end_src

 #+begin_src emacs-lisp
 (setq org-todo-keyword-faces
       '(("TODO" . (:foreground "green" :weight bold))
         ("DONE" . (:foreground "cyan" :weight bold))
         ("WAITING" . (:foreground "red" :weight bold))
         ("SOMEDAY" . (:foreground "gray" :weight bold))))
 #+end_src

***** Projects

  Projects are headings with the =:project:= tag, so we generally don't
  want that tag inherited, except when we display unscheduled tasks that
  don't belong to any projects.

       #+begin_src emacs-lisp
         (setq org-tags-exclude-from-inheritance '("project"))
       #+end_src

  This code makes it easy for me to focus on one project and its tasks.

  #+begin_src emacs-lisp
    (add-to-list 'org-speed-commands-user '("N" org-narrow-to-subtree))
    (add-to-list 'org-speed-commands-user '("W" widen))
    (defun wc/org-agenda-for-subtree ()
      (interactive)
      (if (derived-mode-p 'org-agenda-mode)
        (let* ((marker (or (org-get-at-bol 'org-marker)
                           (org-agenda-error)))
               (hdmarker (or (org-get-at-bol 'org-hd-marker) marker))
               (pos (marker-position marker))
               (col (current-column))
               newhead)
          (org-with-remote-undo (marker-buffer marker)
            (with-current-buffer (marker-buffer marker)
              (widen)
              (let ((org-agenda-view-columns-initially t))
                (org-agenda nil "t" 'subtree)))))
        (let ((org-agenda-view-columns-initially t))
          (org-agenda nil "t" 'subtree))))
    (add-to-list 'org-speed-commands-user '("T" wc/org-agenda-for-subtree))
  #+end_src

  There's probably a proper way to do this, maybe with =<=. Oh, that would work nicely. =< C-c a t= too.

***** Tag tasks with GTD-ish contexts

  This defines keyboard shortcuts for those, too.

       #+begin_src emacs-lisp
         (setq org-tag-alist '(("@work" . ?b)
                               ("@home" . ?h)
                               ("@writing" . ?w)
                               ("@errands" . ?e)
                               ("@social" . ?s)
                               ("@exercise" . ?x)
                               ("@phone" . ?p)
                               ("@reading" . ?r)
                               ("@computer" . ?l)
                               ("lowenergy" . ?0)
                               ("highenergy" . ?1)))
       #+end_src

***** Enable filtering by effort estimates

  That way, it's easy to see short tasks that I can finish.

  #+begin_src emacs-lisp
    (add-to-list 'org-global-properties
          '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
  #+end_src

***** Track time

  #+begin_src emacs-lisp
    (use-package org
     :init
     (progn
      (setq org-clock-idle-time nil)
      (setq org-log-done 'time)
      (setq org-clock-continuously t)
      (setq org-clock-persist t)
      (setq org-clock-in-switch-to-state "STARTED")
      (setq org-clock-in-resume t)
      (setq org-clock-report-include-clocking-task t))
     :config
     (progn
      (org-clock-persistence-insinuate)))
  #+end_src

  Too many clock entries clutter up a heading.

  #+begin_src emacs-lisp
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer 1)
  #+end_src

*** Templates

**** Structure templates

Insert blocks using =<s[TAB]=, etc.
Redefine =<l= to insert Emacs lisp block instead of LaTeX.

#+begin_src emacs-lisp
  (setq org-structure-template-alist
        '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
          ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
          ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
          ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
          ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
          ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
          ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
          ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
          ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
          ("H" "#+html: " "<literal style=\"html\">?</literal>")
          ("a" "#+begin_ascii\n?\n#+end_ascii")
          ("A" "#+ascii: ")
          ("i" "#+index: ?" "#+index: ?")
          ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+end_src

*** Org agenda

**** Basic configuration

Minimize the files searched for agenda items and TODOs to keep
scanning faster.

#+begin_src emacs-lisp
  (setq org-agenda-files
        (delq nil
              (mapcar (lambda (x) (and (file-exists-p x) x))
                      '("~/org/organizer.org"
                        "~/org/work.org"))))
#+end_src


Look at two days at a time when planning using the Org agenda. See log
entries but do not see scheduled items that were finished. Use a time
grid to see how appointments are spread out.

#+begin_src emacs-lisp
  (setq org-agenda-span 6)
  (setq org-agenda-sticky nil)
  (setq org-agenda-inhibit-startup t)
  (setq org-agenda-use-tag-inheritance t)
  (setq org-agenda-show-log t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
  (setq org-agenda-time-grid
        '((daily today require-timed)
         "----------------"
         (800 1000 1200 1400 1600 1800)))
  (setq org-columns-default-format "%50ITEM %12SCHEDULED %TODO %3PRIORITY %Effort{:} %TAGS")
#+end_src

Additional keyboard shortcuts for agenda.

#+begin_src emacs-lisp
(bind-key "Y" 'org-agenda-todo-yesterday org-agenda-mode-map)
#+end_src

**** Google Calendar sync

#+begin_src emacs-lisp
  (require-package 'org-caldav)
  (require 'org-caldav)

  (setq org-caldav-url
        "https://www.google.com/calendar/dav")
  (setq org-caldav-calendar-id "q1ll5o8mh680j5sa8tc69rkado@group.calendar.google.com")
  (setq org-caldav-inbox "~/org/gcal_in.org")
  ;(setq org-caldav-files '())
  (setq org-icalendar-timezone "America/New_York")
#+end_src

Gnutls does not work on Windows by default:
[[http://xn--9dbdkw.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html]]

Need to add DLLs from
[[http://sourceforge.net/projects/ezwinports/files/]] for gnutls into the
bin folder.

Test to see if gnutls works with =M-: (gnutls-available-p) RET=, which
should return =t=.

Next, add a set of CA certificates. Get them from curl, add
=cacert.pem= to a location, and point =gnutls-trustfiles= to it.

(when *is-my-desktop* (setq gnutls-trustfiles "c:/Users/wcohen/.emacs.d/cacert.pem"))

**** Display projects with associated subtasks

A view that showed projects with a few subtasks underneath
them. Here's a sample of the output:

#+begin_example
Headlines with TAGS match: +PROJECT
Press `C-u r' to search again with new search string
  organizer:  Set up communication processes for Awesome Foundation Toronto
  organizer:  TODO Announce the next pitch night
  organizer:  TODO Follow up with the winner of the previous pitch night for any news to include in the updates

  organizer:  Tidy up the house so that I can find things quickly
  organizer:  TODO Inventory all the things in closets and boxes         :@home:
  organizer:  TODO Drop things off for donation                       :@errands:

  organizer:  Learn how to develop for Android devices
#+end_example

#+begin_src emacs-lisp
  (defun wc/org-agenda-project-agenda ()
    "Return the project headline and up to `wc/org-agenda-limit-items' tasks."
    (save-excursion
      (let* ((marker (org-agenda-new-marker))
             (heading
              (org-agenda-format-item "" (org-get-heading) (org-get-category) nil))
             (org-agenda-restrict t)
             (org-agenda-restrict-begin (point))
             (org-agenda-restrict-end (org-end-of-subtree 'invisible))
             ;; Find the TODO items in this subtree
             (list (org-agenda-get-day-entries (buffer-file-name) (calendar-current-date) :todo)))
        (org-add-props heading
            (list 'face 'defaults
                  'done-face 'org-agenda-done
                  'undone-face 'default
                  'mouse-face 'highlight
                  'org-not-done-regexp org-not-done-regexp
                  'org-todo-regexp org-todo-regexp
                  'org-complex-heading-regexp org-complex-heading-regexp
                  'help-echo
                  (format "mouse-2 or RET jump to org file %s"
                          (abbreviate-file-name
                           (or (buffer-file-name (buffer-base-buffer))
                               (buffer-name (buffer-base-buffer))))))
          'org-marker marker
          'org-hd-marker marker
          'org-category (org-get-category)
          'type "tagsmatch")
        (concat heading "\n"
                (org-agenda-finalize-entries list)))))

    (defun wc/org-agenda-projects-and-tasks (match)
      "Show TODOs for all `org-agenda-files' headlines matching MATCH."
      (interactive "MString: ")
      (let ((todo-only nil))
        (if org-agenda-overriding-arguments
            (setq todo-only (car org-agenda-overriding-arguments)
                  match (nth 1 org-agenda-overriding-arguments)))
        (let* ((org-tags-match-list-sublevels
                org-tags-match-list-sublevels)
               (completion-ignore-case t)
               rtn rtnall files file pos matcher
               buffer)
          (when (and (stringp match) (not (string-match "\\S-" match)))
            (setq match nil))
          (setq matcher (org-make-tags-matcher match)
                match (car matcher) matcher (cdr matcher))
          (catch 'exit
            (if org-agenda-sticky
                (setq org-agenda-buffer-name
                      (if (stringp match)
                          (format "*Org Agenda(%s:%s)*"
                                  (or org-keys (or (and todo-only "M") "m")) match)
                        (format "*Org Agenda(%s)*" (or (and todo-only "M") "m")))))
            (org-agenda-prepare (concat "TAGS " match))
            (org-compile-prefix-format 'tags)
            (org-set-sorting-strategy 'tags)
            (setq org-agenda-query-string match)
            (setq org-agenda-redo-command
                  (list 'org-tags-view `(quote ,todo-only)
                        (list 'if 'current-prefix-arg nil `(quote ,org-agenda-query-string))))
            (setq files (org-agenda-files nil 'ifmode)
                  rtnall nil)
            (while (setq file (pop files))
              (catch 'nextfile
                (org-check-agenda-file file)
                (setq buffer (if (file-exists-p file)
                                 (org-get-agenda-file-buffer file)
                               (error "No such file %s" file)))
                (if (not buffer)
                    ;; If file does not exist, error message to agenda
                    (setq rtn (list
                               (format "ORG-AGENDA-ERROR: No such org-file %s" file))
                          rtnall (append rtnall rtn))
                  (with-current-buffer buffer
                    (unless (derived-mode-p 'org-mode)
                      (error "Agenda file %s is not in `org-mode'" file))
                    (save-excursion
                      (save-restriction
                        (if org-agenda-restrict
                            (narrow-to-region org-agenda-restrict-begin
                                              org-agenda-restrict-end)
                          (widen))
                        (setq rtn (org-scan-tags 'wc/org-agenda-project-agenda matcher todo-only))
                        (setq rtnall (append rtnall rtn))))))))
            (if org-agenda-overriding-header
                (insert (org-add-props (copy-sequence org-agenda-overriding-header)
                            nil 'face 'org-agenda-structure) "\n")
              (insert "Headlines with TAGS match: ")
              (add-text-properties (point-min) (1- (point))
                                   (list 'face 'org-agenda-structure
                                         'short-heading
                                         (concat "Match: " match)))
              (setq pos (point))
              (insert match "\n")
              (add-text-properties pos (1- (point)) (list 'face 'org-warning))
              (setq pos (point))
              (unless org-agenda-multi
                (insert "Press `C-u r' to search again with new search string\n"))
              (add-text-properties pos (1- (point)) (list 'face 'org-agenda-structure)))
            (org-agenda-mark-header-line (point-min))
            (when rtnall
              (insert (mapconcat 'identity rtnall "\n") ""))
            (goto-char (point-min))
            (or org-agenda-multi (org-agenda-fit-window-to-buffer))
            (add-text-properties (point-min) (point-max)
                                 `(org-agenda-type tags
                                                   org-last-args (,todo-only ,match)
                                                   org-redo-cmd ,org-agenda-redo-command
                                                   org-series-cmd ,org-cmd))
            (org-agenda-finalize)
            (setq buffer-read-only t)))))
#+end_src

**** Org agenda custom commands

There are many custom commands here to remember.

| Key         | Description                                                                                    |
| .           | What am I waiting for?                                                                         |
| T           | Not really an agenda command - shows the to-do tree in the current file                        |
| b           | Shows business-related tasks                                                                   |
| o           | Shows personal tasks and miscellaneous tasks (o: organizer)                                    |
| w           | Show all tasks for the upcoming week                                                           |
| W           | Show all tasks for the upcoming week, aside from the routine ones                              |
| g ...       | Show tasks by context: b - business; c - coding; w - writing; p - phone; d - drawing, h - home |
| 0           | Show common contexts with up to 3 tasks each, so that I can choose what I feel like working on |
| ) (shift-0) | Show common contexts with all the tasks associated with them                                   |
| 9           | Show common contexts with up to 3 unscheduled tasks each                                       |
| ( (shift-9) | Show common contexts with all the unscheduled tasks associated with them                       |
| d           | Timeline for today (agenda, clock summary)                                                     |
| u           | Unscheduled tasks to do if I have free time                                                    |
| U           | Unscheduled tasks that are not part of projects                                                |
| P           | Tasks by priority                                                                              |
| p           | My projects                                                                                    |
| 2           | Projects with tasks                                                                            |

#+begin_src emacs-lisp
    (defvar wc/org-agenda-contexts
      '((tags-todo "+@phone")
        (tags-todo "+@work")
        (tags-todo "+@social")
        (tags-todo "+@coding")
        (tags-todo "+@computer")
        (tags-todo "+@home")
        (tags-todo "+@errands"))
      "Usual list of contexts.")
    (defun wc/org-agenda-skip-scheduled ()
      (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp "\n]+>"))
    (setq org-agenda-custom-commands
          `(("T" tags-todo "TODO=\"TODO\"-goal-routine-SCHEDULED={.+}")
            ("b" todo ""
             ((org-agenda-files '("~/personal/business.org"))))
            ("B" todo ""
             ((org-agenda-files '("~/Dropbox/books"))))
            ("o" todo ""
             ((org-agenda-files '("~/personal/organizer.org"))))
            ("c" todo ""
             ((org-agenda-prefix-format "")
              (org-agenda-cmp-user-defined 'wc/org-sort-agenda-items-todo)
              (org-agenda-view-columns-initially t)
              ))
            ;; Weekly review
            ("w" "Weekly review" agenda ""
             ((org-agenda-span 7)
              (org-agenda-log-mode 1)))
            ("W" "Weekly review sans routines" agenda ""
             ((org-agenda-span 7)
              (org-agenda-log-mode 1)
              (org-agenda-tag-filter-preset '("-routine"))))
            ("2" "Bi-weekly review" agenda "" ((org-agenda-span 14) (org-agenda-log-mode 1)))
            ("gb" "Business" todo ""
             ((org-agenda-files '("~/personal/business.org"))
              (org-agenda-view-columns-initially t)))
            ("gc" "Coding" tags-todo "@coding"
             ((org-agenda-view-columns-initially t)))
            ("gw" "Writing" tags-todo "@writing"
             ((org-agenda-view-columns-initially t)))
            ("gp" "Publishing" tags-todo "@publishing"
             ((org-agenda-view-columns-initially t)))
            ("gP" "Phone" tags-todo "@phone"
             ((org-agenda-view-columns-initially t)))
            ("gd" "Drawing" tags-todo "@drawing"
             ((org-agenda-view-columns-initially t)))
            ("gh" "Home" tags-todo "@home"
             ((org-agenda-view-columns-initially t)))
            ("ge" "Errands" tags-todo "@errands"
             ((org-agenda-view-columns-initially t)))
            ("0" "Top 3 by context"
             ,wc/org-agenda-contexts
             ((org-agenda-sorting-strategy '(priority-up effort-down))
              (wc/org-agenda-limit-items 3)))
            (")" "All by context"
             ,wc/org-agenda-contexts
             ((org-agenda-sorting-strategy '(priority-down effort-down))
              (wc/org-agenda-limit-items nil)))
            ("9" "Unscheduled top 3 by context"
             ,wc/org-agenda-contexts
             ((org-agenda-skip-function 'wc/org-agenda-skip-scheduled)
              (org-agenda-sorting-strategy '(priority-down effort-down))
              (wc/org-agenda-limit-items 3)))
            ("(" "All unscheduled by context"
             ,wc/org-agenda-contexts
             ((org-agenda-skip-function 'wc/org-agenda-skip-scheduled)
              (org-agenda-sorting-strategy '(priority-down effort-down))
              ))
            ("d" "Timeline for today" ((agenda "" ))
             ((org-agenda-ndays 1)
              (org-agenda-show-log t)
              (org-agenda-log-mode-items '(clock closed))
              (org-agenda-clockreport-mode t)
              (org-agenda-entry-types '())))
            ("." "Waiting for" todo "WAITING")
            ("u" "Unscheduled tasks" tags-todo "-someday-TODO=\"SOMEDAY\"-TODO=\"DELEGATED\"-TODO=\"WAITING\"-project"
             ((org-agenda-skip-function 'wc/org-agenda-skip-scheduled)
              (org-agenda-view-columns-initially t)
              (org-tags-exclude-from-inheritance '("project"))
              (org-agenda-overriding-header "Unscheduled TODO entries: ")
              (org-columns-default-format "%50ITEM %TODO %3PRIORITY %Effort{:} %TAGS")
              (org-agenda-sorting-strategy '(todo-state-up priority-down effort-up tag-up category-keep))))
            ("U" "Unscheduled tasks outside projects" tags-todo "-project"
             ((org-agenda-skip-function 'wc/org-agenda-skip-scheduled)
              (org-tags-exclude-from-inheritance nil)
              (org-agenda-view-columns-initially t)
              (org-agenda-overriding-header "Unscheduled TODO entries outside projects: ")
              (org-agenda-sorting-strategy '(todo-state-up priority-down tag-up category-keep effort-down))))
            ("P" "By priority"
             ((tags-todo "+PRIORITY=\"A\"")
              (tags-todo "+PRIORITY=\"B\"")
              (tags-todo "+PRIORITY=\"\"")
              (tags-todo "+PRIORITY=\"C\""))
             ((org-agenda-prefix-format "%-10c %-10T %e ")
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            ("pp" tags "+project-someday-TODO=\"DONE\"-TODO=\"SOMEDAY\""
             ((org-tags-exclude-from-inheritance '("project"))
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            ("p." tags "+project-TODO=\"DONE\""
             ((org-tags-exclude-from-inheritance '("project"))
              (org-agenda-sorting-strategy '(priority-down tag-up category-keep effort-down))))
            ("S" tags-todo "TODO=\"STARTED\"")
            ("C" "Cooking"
             ((tags "vegetables")
              (tags "chicken")
              (tags "beef")
              (tags "pork")
              (tags "other"))
             ((org-agenda-files '("~/personal/cooking.org"))
              (org-agenda-view-columns-initially t)
              (org-agenda-sorting-strategy '(scheduled-up time-down todo-state-up)))
             )
            ("2" "List projects with tasks" wc/org-agenda-projects-and-tasks
             "+PROJECT"
               ((wc/org-agenda-limit-items 3)))))
  (bind-key "<apps> a" 'org-agenda)
#+end_src


**** Make it easy to mark a task as done

Great for quickly going through the to-do list. Gets rid of one
extra keystroke.

#+begin_src emacs-lisp
(defun wc/org-agenda-done (&optional arg)
  "Mark current TODO as done.
This changes the line at point, all other lines in the agenda referring to
the same tree node, and the headline of the tree node in the Org-mode file."
  (interactive "P")
  (org-agenda-todo "DONE"))
;; Override the key definition for org-exit
(define-key org-agenda-mode-map "x" 'wc/org-agenda-done)
#+end_src

**** Make it easy to mark a task as done and create a follow-up task

#+begin_src emacs-lisp
  (defun wc/org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "DONE")
    (org-agenda-switch-to)
    (org-capture 0 "t"))
;; Override the key definition
(define-key org-agenda-mode-map "X" 'wc/org-agenda-mark-done-and-add-followup)
#+end_src

**** Capture something based on the agenda

#+begin_src emacs-lisp
(defun wc/org-agenda-new ()
  "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-switch-to)
  (org-capture 0))
;; New key assignment
(define-key org-agenda-mode-map "N" 'wc/org-agenda-new)
#+end_src

**** Sorting by date and priority

#+begin_src emacs-lisp
  (setq org-agenda-sorting-strategy
        '((agenda time-up priority-down tag-up effort-up category-keep)
          (todo user-defined-up todo-state-up priority-down effort-up)
          (tags user-defined-up)
          (search category-keep)))
  (setq org-agenda-cmp-user-defined 'wc/org-sort-agenda-items-user-defined)
  (require 'cl)
  (defun wc/org-get-context (txt)
    "Find the context."
    (car (member-if
          (lambda (item) (string-match "@" item))
          (get-text-property 1 'tags txt))))

  (defun wc/org-compare-dates (a b)
    "Return 1 if A should go after B, -1 if B should go after A, or 0 if a = b."
    (cond
     ((and (= a 0) (= b 0)) nil)
     ((= a 0) 1)
     ((= b 0) -1)
     ((> a b) 1)
     ((< a b) -1)
     (t nil)))

  (defun wc/org-complete-cmp (a b)
    (let* ((state-a (or (get-text-property 1 'todo-state a) ""))
           (state-b (or (get-text-property 1 'todo-state b) "")))
      (or
       (if (member state-a org-done-keywords-for-agenda) 1)
       (if (member state-b org-done-keywords-for-agenda) -1))))

  (defun wc/org-date-cmp (a b)
    (let* ((sched-a (or (get-text-property 1 'org-scheduled a) 0))
           (sched-b (or (get-text-property 1 'org-scheduled b) 0))
           (deadline-a (or (get-text-property 1 'org-deadline a) 0))
           (deadline-b (or (get-text-property 1 'org-deadline b) 0)))
      (or
       (wc/org-compare-dates
        (wc/org-min-date sched-a deadline-a)
        (wc/org-min-date sched-b deadline-b)))))

  (defun wc/org-min-date (a b)
    "Return the smaller of A or B, except for 0."
    (funcall (if (and (> a 0) (> b 0)) 'min 'max) a b))

  (defun wc/org-sort-agenda-items-user-defined (a b)
    ;; compare by deadline, then scheduled date; done tasks are listed at the very bottom
    (or
     (wc/org-complete-cmp a b)
     (wc/org-date-cmp a b)))

  (defun wc/org-context-cmp (a b)
    "Compare CONTEXT-A and CONTEXT-B."
    (let ((context-a (wc/org-get-context a))
          (context-b (wc/org-get-context b)))
      (cond
       ((null context-a) +1)
       ((null context-b) -1)
       ((string< context-a context-b) -1)
       ((string< context-b context-a) +1)
       (t nil))))

  (defun wc/org-sort-agenda-items-todo (a b)
    (or
     (org-cmp-time a b)
     (wc/org-complete-cmp a b)
     (wc/org-context-cmp a b)
     (wc/org-date-cmp a b)
     (org-cmp-todo-state a b)
     (org-cmp-priority a b)
     (org-cmp-effort a b)))
#+end_src

**** Preventing things from falling through the cracks
This helps keep track of unscheduled tasks, because I might sometimes
forget to assign tasks a date. I also want to keep track of stuck projects.
#+begin_src emacs-lisp
(defun wc/org-agenda-list-unscheduled (&rest ignore)
  "Create agenda view for tasks that are unscheduled and not done."
  (let* ((org-agenda-todo-ignore-with-date t)
         (org-agenda-overriding-header "List of unscheduled tasks: "))
    (org-agenda-get-todos)))
(setq org-stuck-projects
      '("+PROJECT-MAYBE-DONE"
        ("TODO")
        nil
        "\\<IGNORE\\>"))
#+end_src


*** Reviews

Still to do.

*** Filing

Still to do.

*** HTML Export

Attempting to export to HTML gives the following error:

#+begin_example
  org-html-fontify-code: Wrong number of arguments: #[(_beg _end) "À " [font-lock-fontify-buffer] 1], 0
#+end_example

Accordingly, follow the directions from [[http://wenshanren.org/?p%3D781][here]].

#+begin_src emacs-lisp
  (defun org-font-lock-ensure ()
    (font-lock-fontify-buffer))
#+end_src



** Interactivity

*** Company mode

#+begin_src emacs-lisp
  (require-package 'company)

  (require 'company)

  (add-hook 'after-init-hook 'global-company-mode)

#+end_src

*** Version control

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-vc.el]]

#+begin_src emacs-lisp
  (require-package 'diff-hl)
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+end_src

**** Git

If, on Windows, git gives an error similar to =Couldn't reserve space
for cygwin's heap=, then that means that the command line version of
=git= has been updated.

Based on
[[http://stackoverflow.com/questions/18502999/git-extensions-win32-error-487-couldnt-reserve-space-for-cygwins-heap-win32]]:
=cd= using the DOS command prompt, run as
Administrator, to =C:\Program Files (x86)\Git\bin=, and run the
following command:

=rebase -b 0x50000000 msys-1.0.dll=

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-git.el]].

#+begin_src emacs-lisp
  (require-package 'magit)
  (require-package 'git-blame)
  (require-package 'git-commit-mode)
  (require-package 'git-rebase-mode)
  (require-package 'gitignore-mode)
  (require-package 'gitconfig-mode)
  (require-package 'git-messenger) ;; Though see also vc-annotate's "n" & "p" bindings
  (require-package 'git-timemachine)

  (setq-default
   magit-save-some-buffers nil
   magit-process-popup-time 10
   magit-diff-refine-hunk t
   magit-completing-read-function 'magit-ido-completing-read)

  ;; Turn off new magit version warning

  (setq magit-last-seen-setup-instructions "1.4.0")

  ;; Hint: customize `magit-repo-dirs' so that you can use C-u M-F12 to
  ;; quickly open magit on any one of your projects.
  (global-set-key [(meta f12)] 'magit-status)

  (after-load 'magit
    (define-key magit-status-mode-map (kbd "C-M-<up>") 'magit-goto-parent-section))

  (require-package 'fullframe)
  (after-load 'magit
    (fullframe magit-status magit-mode-quit-window))

  (add-hook 'git-commit-mode-hook 'goto-address-mode)
  (after-load 'session
    (add-to-list 'session-mode-disable-list 'git-commit-mode))

  
  ;;; When we start working on git-backed files, use git-wip if available

  (after-load 'magit
    (when (executable-find magit-git-executable)
      (global-magit-wip-save-mode)
      (diminish 'magit-wip-save-mode)))

  (after-load 'magit
    (diminish 'magit-auto-revert-mode))

  
  (when *is-mac*
    (after-load 'magit
      (add-hook 'magit-mode-hook (lambda () (local-unset-key [(meta h)])))))


  
  ;; Convenient binding for vc-git-grep
  (global-set-key (kbd "C-x v f") 'vc-git-grep)


  
  ;;; git-svn support

  (require-package 'magit-svn)
  (autoload 'magit-svn-enabled "magit-svn")
  (defun wc/maybe-enable-magit-svn-mode ()
    (when (magit-svn-enabled)
      (magit-svn-mode)))
  (add-hook 'magit-status-mode-hook #'wc/maybe-enable-magit-svn-mode)

  (after-load 'compile
    (dolist (defn (list '(git-svn-updated "^\t[A-Z]\t\\(.*\\)$" 1 nil nil 0 1)
                        '(git-svn-needs-update "^\\(.*\\): needs update$" 1 nil nil 2 1)))
      (add-to-list 'compilation-error-regexp-alist-alist defn)
      (add-to-list 'compilation-error-regexp-alist (car defn))))

  (defvar git-svn--available-commands nil "Cached list of git svn subcommands")
  (defun git-svn--available-commands ()
    (or git-svn--available-commands
        (setq git-svn--available-commands
              (wc/string-all-matches
               "^  \\([a-z\\-]+\\) +"
               (shell-command-to-string "git svn help") 1))))

  (defun git-svn (dir command)
    "Run a git svn subcommand in DIR."
    (interactive (list (read-directory-name "Directory: ")
                       (completing-read "git-svn command: " (git-svn--available-commands) nil t nil nil (git-svn--available-commands))))
    (let* ((default-directory (vc-git-root dir))
           (compilation-buffer-name-function (lambda (major-mode-name) "*git-svn*")))
      (compile (concat "git svn " command))))

  
  (require-package 'git-messenger)
  (global-set-key (kbd "C-x v p") #'git-messenger:popup-message)


  ;; On Windows, Git needs to ask for a password.
  ;; Ensure that Git on Windows is in the path.
  (when *is-windows*
    (setenv "GIT_ASKPASS" "git-gui--askpass"))

#+end_src

**** Github

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-github.el]].

#+begin_src emacs-lisp

  (require-package 'yagist)
  (require-package 'github-browse-file)
  (require-package 'bug-reference-github)
  (add-hook 'prog-mode-hook 'bug-reference-prog-mode)

  (maybe-require-package 'github-clone)
  (maybe-require-package 'magit-gh-pulls)

#+end_src

*** Discover mode

#+begin_src emacs-lisp
  (require-package 'discover)
  (require 'discover)
  (global-discover-mode 1)
#+end_src

*** Window manipulation

#+begin_src emacs-lisp
  (require-package 'golden-ratio)
  (require-package 'winner)
  (require-package 'switch-window)


  ;;----------------------------------------------------------------------------
  ;; Navigate window layouts with "C-c <left>" and "C-c <right>"
  ;;----------------------------------------------------------------------------
  (winner-mode 1)


  ;;; Golden Ratio

  (require 'golden-ratio)

  (setq golden-ratio-exclude-modes '("nh-map-mode" "nh-message-mode"
                                     "nh-status-mode" "rmail-mode"
                                     "rmail-summary-mode"
                                     ;; fundamental-mode is added here because the
                                     ;; temp buffers used by switch-window is
                                     ;; fundamental-mode "fundamental-mode"
                                     ))

  (golden-ratio-mode 1)
  (setq golden-ratio-auto-scale t)

  ;;; Helm Autoresize and Golden Ratio can coexist

  (add-to-list 'golden-ratio-inhibit-functions 'wc/helm-alive-p)

  ;; Make "C-x o" prompt for a target window when there are more than 2

  (require 'switch-window)
  (setq switch-window-shortcut-style 'qwerty)
  (defadvice switch-window
      (around golden-ratio-resize-window activate)
    (if (<= (length (window-list)) 3)
        (call-interactively 'other-window)
      ad-do-it)
    (golden-ratio)
    nil)
  (global-set-key (kbd "C-x o") 'switch-window)



  ;;----------------------------------------------------------------------------
  ;; When splitting window, show (other-buffer) in the new window
  ;;----------------------------------------------------------------------------
  (defun split-window-func-with-other-buffer (split-function)
    (lexical-let ((s-f split-function))
      (lambda ()
        (interactive)
        (funcall s-f)
        (set-window-buffer (next-window) (other-buffer)))))

  (global-set-key "\C-x2" (split-window-func-with-other-buffer 'split-window-vertically))
  (global-set-key "\C-x3" (split-window-func-with-other-buffer 'split-window-horizontally))

  (defun wc/toggle-delete-other-windows ()
    "Delete other windows in frame if any, or restore previous window config."
    (interactive)
    (if (and winner-mode
             (equal (selected-window) (next-window)))
        (winner-undo)
      (delete-other-windows)))

  (global-set-key "\C-x1" 'wc/toggle-delete-other-windows)

  ;;----------------------------------------------------------------------------
  ;; Rearrange split windows
  ;;----------------------------------------------------------------------------
  (defun split-window-horizontally-instead ()
    (interactive)
    (save-excursion
      (delete-other-windows)
      (funcall (split-window-func-with-other-buffer 'split-window-horizontally))))

  (defun split-window-vertically-instead ()
    (interactive)
    (save-excursion
      (delete-other-windows)
      (funcall (split-window-func-with-other-buffer 'split-window-vertically))))

  (global-set-key "\C-x|" 'split-window-horizontally-instead)
  (global-set-key "\C-x_" 'split-window-vertically-instead)


  ;; Next window and previous window

  (defun prev-window ()
    (interactive)
    (other-window -1))

  (define-key global-map (kbd "C-x p") 'prev-window)

  ;; Borrowed from http://postmomentum.ch/blog/201304/blog-on-emacs
  (defun wc/split-window()
    "Split the window to see the most recent buffer in the other window.
  Call a second time to restore the original window configuration."
    (interactive)
    (if (eq last-command 'wc/split-window)
        (progn
          (jump-to-register :wc/split-window)
          (setq this-command 'wc/unsplit-window))
      (window-configuration-to-register :wc/split-window)
      (switch-to-buffer-other-window nil)))

  (global-set-key (kbd "<f7>") 'wc/split-window)
  (global-set-key (kbd "<f6>")
                  (lambda ()
                    (interactive)
                    (switch-to-buffer nil)))


#+end_src

*** File manipulation

*** Delete file and buffer

From [[http://emacsredux.com/blog/2013/04/03/delete-file-and-buffer/]].

#+begin_src emacs-lisp
  (defun delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
#+end_src


*** Checking and spelling

**** Flycheck

From
[[https://github.com/purcell/emacs.d/blob/master/lisp/init-flycheck.el]].

#+begin_src emacs-lisp
  (when (maybe-require-package 'flycheck)
    (add-hook 'after-init-hook 'global-flycheck-mode)

    ;; Override default flycheck triggers
    (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled)
          flycheck-idle-change-delay 0.8)

    (setq flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list))
#+end_src


**** Spelling and flyspell

From
[[https://github.com/purcell/emacs.d/blob/master/lisp/init-spelling.el]] and
[[https://github.com/purcell/emacs.d/blob/master/lisp/init-flyspell.el]].

#+begin_src emacs-lisp
  (require 'ispell)

  (when *is-my-desktop* (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/"))

  (when (executable-find ispell-program-name)
  ;;----------------------------------------------------------------------------
  ;; Add spell-checking in comments for all programming language modes
  ;;----------------------------------------------------------------------------
  (if (fboundp 'prog-mode)
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (dolist (hook '(lisp-mode-hook
                    emacs-lisp-mode-hook
                    scheme-mode-hook
                    clojure-mode-hook
                    ruby-mode-hook
                    yaml-mode
                    python-mode-hook
                    shell-mode-hook
                    php-mode-hook
                    css-mode-hook
                    haskell-mode-hook
                    caml-mode-hook
                    nxml-mode-hook
                    crontab-mode-hook
                    perl-mode-hook
                    tcl-mode-hook
                    javascript-mode-hook))
      (add-hook hook 'flyspell-prog-mode)))

  (after-load 'flyspell
    (add-to-list 'flyspell-prog-text-faces 'nxml-text-face)))
#+end_src


** Final configuration

*** Packages needing no configuration

#+begin_src emacs-lisp
  (require-package 'htmlize)
  (require-package 'regex-tool)

  ;;----------------------------------------------------------------------------
  ;; Allow access from emacsclient
  ;;----------------------------------------------------------------------------


  ;; TODO: Diagnose why I needed to comment these out on windows
  ;; (require 'server)
  ;; (unless (server-running-p)
  ;;   (server-start))


  ;;----------------------------------------------------------------------------
  ;; Variables configured via the interactive 'customize' interface
  ;;----------------------------------------------------------------------------
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

#+end_src

*** Locales

Setting these earlier in the file does not work.

#+begin_src emacs-lisp
  (defun wc/utf8-locale-p (v)
    "Return whether locale string V relates to a UTF-8 locale."
    (and v (string-match "UTF-8" v)))

  (defun locale-is-utf8-p ()
    "Return t iff the \"locale\" command or environment variables prefer UTF-8."
    (or (wc/utf8-locale-p (and (executable-find "locale") (shell-command-to-string "locale")))
        (wc/utf8-locale-p (getenv "LC_ALL"))
        (wc/utf8-locale-p (getenv "LC_CTYPE"))
        (wc/utf8-locale-p (getenv "LANG"))))

  (when (or window-system (locale-is-utf8-p))
    (setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
    (set-language-environment 'utf-8)
    (setq locale-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-selection-coding-system (if (eq system-type 'windows-nt) 'utf-16-le 'utf-8))
    (prefer-coding-system 'utf-8))

  (add-hook 'after-init-hook
            (lambda ()
              (message "init completed in %.2fms"
                       (wc/time-subtract-millis after-init-time before-init-time))))


  (provide 'init)

#+end_src

** Variables set by custom

#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     (quote
      (magit-gh-pulls github-clone bug-reference-github github-browse-file yagist magit-svn zenburn-theme whole-line-or-region whitespace-cleanup-mode wgrep web-mode unfill undo-tree tern-auto-complete switch-window scratch regex-tool rainbow-delimiters project-local-variables paredit-menu paredit-everywhere page-break-lines nodejs-repl mwe-log-commands multiple-cursors move-dup magit json-mode js3-mode js-comint htmlize highlight-symbol highlight-escape-sequences helm-projectile guru-mode guide-key golden-ratio gitignore-mode gitconfig-mode git-timemachine git-messenger git-blame geiser fullframe flycheck fill-column-indicator expand-region exec-path-from-shell ess elpy discover diminish diff-hl deft coffee-mode browse-kill-ring ace-jump-mode ac-js2))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_src
