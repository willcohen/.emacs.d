;;; Configuration for .emacs;;; Time-stamp: <2014-11-25 09:43:23 wcohen>;;; ESS on Windows needs to be installed outside of the package manager:;;; http://vgoulet.act.ulaval.ca/en/emacs/;;; These are helpful tips to get all of these pieces working;;; together, though it should be documented below:;;; http://gregorygrubbs.com/emacs/10-tips-emacs-windows/;;; In case I forget:;;; M-x R (to enable ESS mode);;; MELPA themes to install:;;; zenburn, solarized;;; On Windows 7, after running emacs:;;; Pin it to taskbar, modify the shortcut to runemacs.exe instead of emacs.exe;;; And set it to run in XP SP3 compatibility mode (so cygwin bash works);;; Font selection -- This just sets Inconsolata to work at size 14 on Windows;;; The OTF is the version of Inconsolata to install on Mac;;; The TTF is the version of Inconsolata to install on Windows;;; (the OTF on Windows gets super blurry);; (cond ((or (eq window-system 'mac) (eq window-system 'ns));;        (set-face-font 'default '"-apple-inconsolata-medium-r-normal--14-0-72-72-m-0-iso10646-1"));;       ((eq window-system 'w32);;        (set-face-font 'default '"-outline-Inconsolata-normal-normal-normal-mono-14-*-*-*-c-*-iso8859-1"));;       ((and (eq window-system 'x) (eq emacs-major-version 23));;        (set-face-font 'default '"-unknown-Inconsolata-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1");;        (add-to-list 'default-frame-alist '(font . "-unknown-Inconsolata-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1"));;        );;       ((eq window-system 'x);;        (set-face-font 'default '"10x20")));;;; SYSTEM DETECTION;; Check if system is Darwin/Mac OS X(defun system-type-is-darwin ()  (interactive)  "Return true if system is darwin-based (Mac OS X)"  (string-equal system-type "darwin")  );; Check if system is Linux(defun system-type-is-linux ()  (interactive)  "Return true if system is Linux-based"  (string-equal system-type "gnu/linux")  );; Check if system is Windows(defun system-type-is-windows ()  (interactive)  "Return true if system is Windows-based"  (string-equal system-type "w32")  );; Check if the system is my home computer(defun system-is-my-laptop ()  (interactive)  "Return true if the system we are running on is my home computer"  (string-equal system-name "TKTKTK")  );; Check if the system is my desktop PC at work(defun system-is-my-desktop ()  (interactive)  "Return true if the system we are running on is my desktop PC at work"  (string-equal system-name "TKTKTK")  );;;; PACKAGE INSTALLATION;;; Set up the package manager: use M-x list-packages to see what is available;;; List the packages you want installed(setq package-list '(paredit paredit-menu web-mode zenburn-theme			     discover elpy));;; Packages to install if Mac(if (system-type-is-darwin)    (setq package-list (append package-list '(ess exec-path-from-shell)))  );;; List the repositories containing them(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")                         ("gnu" . "http://elpa.gnu.org/packages/")));;; Activate all the packages (in particular autoloads)(package-initialize);;; Fetch the list of packages available (unless package-archive-contents  (package-refresh-contents));;; Install the missing packages(dolist (package package-list)  (unless (package-installed-p package)    (package-install package)));;;; PACKAGE-INDEPENDENT ENVIRONMENT SETUP;;; Turn scrollbar off(scroll-bar-mode -1);;; Turn splash screen off(setq inhibit-startup-message t);;; Turn toolbar off(tool-bar-mode -1);;; Turn menubar off;;; (menu-bar-mode -1);;; Setup my full name(setq user-full-name "");;; Setup my email address(setq user-mail-address "");;; Turn on time-stamp updating. Timestamp must be in first 8 lines of;;;   file and look like:;;;   Time-stamp: <>(add-hook 'write-file-hooks 'time-stamp);;;; PACKAGE-DEPENDENT ENVIRONMENT SETUP;;; Enable exec-path-from-shell on Mac(if (system-type-is-darwin)    (exec-path-from-shell-initialize));;; Set default theme to zenburn(defun zenburn-init ()  (load-theme 'zenburn))(add-hook 'after-init-hook 'zenburn-init);;;; STILL UNORGANIZED;;; Turn on Auto-Fill-Mode(setq-default auto-fill-function 'do-auto-fill);;; Enable paredit(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)(add-hook 'ielm-mode-hook             #'enable-paredit-mode)(add-hook 'lisp-mode-hook             #'enable-paredit-mode)(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)(add-hook 'scheme-mode-hook           #'enable-paredit-mode);;; Add menu for paredit, so I can learn the commands better;; (require 'paredit-menu);;; Show matching parentheses minor mode(show-paren-mode 1);;; Remove delay of show-paren-mode(setq show-paren-delay 0);;; Show matching paren when it is offscreen, in show-paren-mode(defadvice show-paren-function  (after show-matching-paren-offscreen activate)  "If the matching paren is offscreen, show the matching line in the        echo area. Has no effect if the character before point is not of        the syntax class ')'."  (interactive)  (let* ((cb (char-before (point)))	 (matching-text (and cb			     (char-equal (char-syntax cb) ?\) )			     (blink-matching-open))))    (when matching-text (message matching-text))));;; Add web-mode(require 'web-mode)(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))(add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode));;; Add discover mode(require 'discover)(global-discover-mode 1);;; Elpy(elpy-enable);;; Misc functions;:; Get current system's name(defun insert-system-name() (interactive)  "Get current system's name"  (insert (format "%s" system-name))  );;: Get current system type(defun insert-system-type() (interactive)  "Get current system type"  (insert (format "%s" system-type))  );; Insertion of Dates.(defun insert-date-string () (interactive)  "Insert a nicely formated date string"  (insert (format-time-string "%a %b %d %H:%M:%S %Y")));;; Open my dot emacs. From jemarch in The Ultimate Emacs Course(defun find-dot-emacs () (interactive)  "Try to find and open the dot emacs file"  (let ((my-init-file (if (not user-init-file)                                   "~/.emacs.d/init.el"                                 user-init-file)))    (find-file my-init-file)));;; Misc keybindings;; C-c i calls insert-date-string(global-set-key (kbd "C-c i") 'insert-date-string);; C-c r reloads ~/.emacs.d/init.el(global-set-key (kbd "C-c r")		'(lambda ()		   (interactive)		   (load-file "~/.emacs.d/init.el")))(custom-set-variables ;; custom-set-variables was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. '(custom-safe-themes   (quote    ("9dae95cdbed1505d45322ef8b5aa90ccb6cb59e0ff26fef0b8f411dfc416c552" default))))(custom-set-faces ;; custom-set-faces was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. )